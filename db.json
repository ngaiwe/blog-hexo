{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/README","path":"README","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"86a96cced2ea2b4941c3797b69d2204c44258e33","modified":1516154892540},{"_id":"source/CNAME","hash":"e62710ea473fa3e11f87711cef1079ff7279f68b","modified":1515708815444},{"_id":"source/README","hash":"721de4e1c251ea20ef615f752289e36b94258b3f","modified":1515710758682},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1515700098611},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1515700098611},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1515700098611},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1515700098612},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1515700098612},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1515700098613},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1515700098613},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1515700098613},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1515700098613},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1515700098613},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1515700098614},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1515700098614},{"_id":"themes/next/_config.yml","hash":"92fa7fe9bafba9cd7e773d374c1295932a0e81eb","modified":1515705878354},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1515700098614},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1515700098614},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1515700098634},{"_id":"source/_posts/.DS_Store","hash":"68f1dae0193cd198e4c99bf117d18b09c4c342b3","modified":1516154892545},{"_id":"source/categories/index.md","hash":"0ccbff3a1bc052097d3ca05ba50fae05778b5aad","modified":1515705589498},{"_id":"source/tags/index.md","hash":"fe764f1abcdafa9b0c15f00529c3521b3f14ffc7","modified":1515705594696},{"_id":"themes/next/.git/HEAD","hash":"75173e2dd18a6221ff84742ff53d01ac5c6e04b0","modified":1515700098603},{"_id":"themes/next/.git/config","hash":"510faaf0899b89e8a0a0a7ebeff0d4b0aa5ad38f","modified":1515700094677},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1515700094437},{"_id":"themes/next/.git/index","hash":"d43b65cd3512a45e2fe1e6bd216658760087ea93","modified":1515700106983},{"_id":"themes/next/.git/packed-refs","hash":"339779e225d913a344c5e6210617badd049c4434","modified":1515700098600},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1515700098612},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1515700098612},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1515700098612},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1515700098615},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1515700098615},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1515700098615},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1515700098615},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1515700098615},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1515700098616},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1515700098616},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1515700098616},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1515700098616},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1515700098616},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1515700098616},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1515700098617},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1515700098617},{"_id":"themes/next/layout/_layout.swig","hash":"06b1eab2e00273e0b94bd32dc682bd92c1e0a747","modified":1515700098618},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1515700098633},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1515700098633},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1515700098633},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1515700098633},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1515700098634},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1515700098634},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1515700098634},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1515700098635},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1515700098635},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1515700098734},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1515700098734},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1515700098734},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515700098668},{"_id":"source/_posts/javascript/.DS_Store","hash":"6de8f2a7e350f9af9b48c6e12e36c71b973f27eb","modified":1516200940437},{"_id":"source/_posts/javascript/eventLoop.md","hash":"5836ee0bb0292a71f2359498f7ec7c50760aae10","modified":1516238737749},{"_id":"source/_posts/javascript/promise.md","hash":"d39926269f3acc16b85d876bf5682fe618da2469","modified":1515820346418},{"_id":"source/_posts/mongodb/mongo-install-linux.md","hash":"8f16e1fea5915fc4db9676e8904334b9042cd710","modified":1516238620369},{"_id":"source/_posts/mongodb/mongo-install-mac.md","hash":"489d075044bbb74a4b890a78cf43c72515ed6e59","modified":1515705532193},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1515700094438},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1515700094438},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1515700094439},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1515700094439},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1515700094438},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1515700094439},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1515700094438},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1515700094438},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1515700094439},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1515700094440},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1515700094437},{"_id":"themes/next/.git/logs/HEAD","hash":"6494657a306ce78b6d98658a1a930e510bd655a1","modified":1515700098603},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1515700098617},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1515700098617},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1515700098618},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1515700098618},{"_id":"themes/next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1515700098619},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1515700098619},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1515700098619},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1515700098619},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1515700098619},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1515700098620},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1515700098620},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1515700098621},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1515700098621},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1515700098621},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1515700098621},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1515700098623},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1515700098623},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1515700098625},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1515700098629},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1515700098629},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1515700098630},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1515700098630},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1515700098630},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1515700098630},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1515700098636},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1515700098636},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1515700098636},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1515700098636},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1515700098637},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1515700098637},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1515700098637},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1515700098637},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1515700098638},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1515700098668},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1515700098668},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1515700098669},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1515700098669},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1515700098669},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1515700098670},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1515700098670},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1515700098670},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1515700098671},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1515700098671},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1515700098671},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1515700098672},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1515700098672},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1515700098672},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1515700098672},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515700098624},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515700098624},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515700098655},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515700098655},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515700098655},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515700098667},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515700098667},{"_id":"source/_drafts/javascript/eventLoop/eventLoop.js","hash":"263465a6adeeeb20138f71f3f8f639dd58bdbf98","modified":1516159450955},{"_id":"source/_drafts/javascript/promise/myPromise.js","hash":"0863303466ffb5cda8f7409def82b886a40115b1","modified":1515820788948},{"_id":"source/_drafts/javascript/promise/example.js","hash":"412c33428af524512e8633da2138ebfcba2872b5","modified":1515820785488},{"_id":"source/_posts/javascript/eventloop/eventloop.png","hash":"991109df2ef5ae00d95568a69200baa1775ed399","modified":1516238197011},{"_id":"source/_posts/javascript/eventloop/nodesystem.png","hash":"3d70f3625caf91da22c6ab7dc294e9e7e1559b2a","modified":1516238199084},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1515700098620},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1515700098620},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1515700098621},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1515700098621},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1515700098622},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1515700098622},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1515700098622},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1515700098622},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1515700098623},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1515700098624},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1515700098624},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1515700098624},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1515700098625},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1515700098625},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1515700098625},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1515700098626},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1515700098626},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1515700098626},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1515700098626},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1515700098626},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1515700098627},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1515700098627},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1515700098627},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1515700098627},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1515700098628},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1515700098628},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1515700098628},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1515700098628},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1515700098628},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1515700098629},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1515700098631},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1515700098632},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1515700098632},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1515700098632},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1515700098654},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1515700098655},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"eaedfaf06dae94ba77a8f4893e2e434bf8859bac","modified":1515700098655},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1515700098655},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1515700098667},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1515700098666},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1515700098667},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1515700098667},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1515700098673},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1515700098673},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1515700098673},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1515700098674},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1515700098674},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1515700098674},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1515700098675},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1515700098675},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1515700098676},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1515700098676},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1515700098676},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1515700098681},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1515700098686},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1515700098686},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1515700098692},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1515700098693},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1515700098693},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1515700098693},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1515700098686},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1515700098694},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1515700098687},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1515700098695},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1515700098695},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1515700098695},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1515700098696},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1515700098711},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1515700098713},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1515700098713},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1515700098713},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1515700098713},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1515700098714},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1515700098714},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1515700098714},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1515700098715},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1515700098715},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1515700098715},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1515700098715},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1515700098715},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1515700098716},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1515700098716},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1515700098716},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1515700098717},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1515700098717},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1515700098717},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1515700098717},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1515700098718},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1515700098718},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1515700098719},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1515700098719},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1515700098724},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1515700098725},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1515700098732},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1515700098733},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1515700098733},{"_id":"source/_posts/mongodb/mongo-install-linux/mongohub.png","hash":"1957d967f1d3f3211950e40e3ff47c50f2a390dc","modified":1516238607965},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1515700098712},{"_id":"source/_posts/javascript/eventloop/eventloop-setTimeout0-file.png","hash":"cf38c7c54dd22d305602abca3e9f679a217cef10","modified":1516238189905},{"_id":"source/_posts/javascript/eventloop/eventloop-setTimeout0-unfile.png","hash":"1175ac208e6de4e40af5cda919a3cb12d341f6bf","modified":1516238192111},{"_id":"source/_posts/javascript/eventloop/eventloop-setTimeout100-file.png","hash":"62e554c0bbeba671fc2304201f5de45d0b5b2479","modified":1516238193963},{"_id":"source/_posts/javascript/eventloop/eventloop-setTimeout100-unfile.png","hash":"aaf03acc83e07d8ed2e7daf39acef96d2a35e63f","modified":1516238195484},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1515700098602},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1515700098631},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1515700098631},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1515700098638},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1515700098638},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1515700098639},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1515700098639},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1515700098639},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1515700098643},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1515700098649},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1515700098653},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1515700098653},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1515700098654},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1515700098654},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1515700098654},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1515700098654},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1515700098653},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1515700098656},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1515700098656},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1515700098656},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1515700098656},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1515700098657},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1515700098657},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1515700098657},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1515700098657},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1515700098663},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1515700098663},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1515700098664},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1515700098664},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1515700098664},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1515700098665},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1515700098665},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1515700098665},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1515700098665},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1515700098666},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1515700098666},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1515700098675},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1515700098679},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1515700098680},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1515700098681},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1515700098694},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1515700098694},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1515700098687},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1515700098688},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1515700098688},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1515700098688},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1515700098688},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1515700098689},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1515700098691},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1515700098691},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1515700098692},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1515700098696},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1515700098697},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1515700098697},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1515700098724},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1515700098724},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1515700098679},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1515700098710},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1515700098711},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1515700098732},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"3b43df68dfc8aeb84695cc1ea57ed2f86e7d57ba","modified":1515700098602},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1515700098639},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1515700098639},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1515700098640},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1515700098640},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1515700098640},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1515700098640},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1515700098641},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1515700098641},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1515700098641},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1515700098641},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1515700098642},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1515700098642},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1515700098642},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1515700098642},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1515700098643},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1515700098643},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1515700098643},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1515700098644},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1515700098644},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1515700098644},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1515700098645},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1515700098645},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1515700098645},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1515700098645},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1515700098645},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1515700098646},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1515700098646},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1515700098646},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1515700098646},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1515700098647},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1515700098647},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1515700098647},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1515700098647},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1515700098648},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1515700098648},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1515700098648},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1515700098648},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1515700098648},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1515700098648},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1515700098649},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1515700098649},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1515700098649},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1515700098650},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1515700098650},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1515700098650},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1515700098650},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1515700098651},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1515700098651},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1515700098651},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1515700098651},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1515700098652},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1515700098652},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1515700098652},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1515700098652},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1515700098652},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1515700098652},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1515700098653},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1515700098657},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1515700098658},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1515700098664},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1515700098677},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1515700098677},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1515700098678},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1515700098678},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1515700098689},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1515700098689},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1515700098690},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1515700098690},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1515700098690},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1515700098691},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1515700098699},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1515700098709},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1515700098702},{"_id":"themes/next/.git/objects/pack/pack-bbb55f7259253842caea39c4f1339fe20b507b4b.idx","hash":"35fac4820c9e287a891b2e2f70748e95b1dbb23b","modified":1515700098583},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1515700098685},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1515700098723},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1515700098707},{"_id":"themes/next/.git/objects/pack/pack-bbb55f7259253842caea39c4f1339fe20b507b4b.pack","hash":"ec1fa04ef70270175681d26fb6fe2107bc744be1","modified":1515700098579},{"_id":"public/categories/index.html","hash":"334834f3044e81a9bd8f6ed8cce985dcf043a023","modified":1516238752239},{"_id":"public/tags/index.html","hash":"e03216c033e8184cb726269bb451e3497ed3a465","modified":1516238752239},{"_id":"public/archives/index.html","hash":"7a2a53852a250c3efb2250b389e4b378f6d95308","modified":1516238752240},{"_id":"public/archives/2018/index.html","hash":"3de3f471fcbb4e98857255e7ca2b68139b262298","modified":1516238752240},{"_id":"public/archives/2018/01/index.html","hash":"0ea5c9276de8608eebc6b30d9444a8238a006a7e","modified":1516238752240},{"_id":"public/categories/javascript/index.html","hash":"f4981c0a4a56c15bee113afbd10844226c68e90f","modified":1516238752240},{"_id":"public/categories/Mongodb/index.html","hash":"a6b960d1c8a2f4197b3c931e81400c857abec792","modified":1516238752240},{"_id":"public/tags/javascript/index.html","hash":"cef5fedf968d3d4c93ac9b1a2e28193844866e86","modified":1516238752240},{"_id":"public/tags/event-loop/index.html","hash":"3cb9b1b2390a206baaa4c05eaa91269b966480c7","modified":1516238752240},{"_id":"public/tags/Event-Loop/index.html","hash":"b770159ee1fd8fdb1b534726d9fb098dc18a3f23","modified":1516238752240},{"_id":"public/tags/Node/index.html","hash":"2dbf42d3cddcf226275aa8a3db3d3ef4685c38da","modified":1516238752240},{"_id":"public/tags/Node-js/index.html","hash":"bb009e3d1a8be141054e7e1364a05fc9dda0b02d","modified":1516238752240},{"_id":"public/tags/node/index.html","hash":"89a178136cc86112be541ebdd821bdd0634b8bf0","modified":1516238752240},{"_id":"public/tags/node-js/index.html","hash":"91e7f5a85fbd7e5f8348bdfec3867170be3cebe2","modified":1516238752240},{"_id":"public/tags/es6/index.html","hash":"b437d28898348e20c24f0627454a16666f32a72f","modified":1516238752240},{"_id":"public/tags/es7/index.html","hash":"568ebb45f6b9b59dad167c6fd42f688d0e168533","modified":1516238752240},{"_id":"public/tags/promise/index.html","hash":"5c672fd49000cdcd2165f5d5a53fb38460c93ef4","modified":1516238752240},{"_id":"public/tags/promise-all/index.html","hash":"f92ef4dec2911f1da0e502fe4c1a56b4e0f4e39e","modified":1516238752240},{"_id":"public/tags/promise-race/index.html","hash":"e58fd1104a2b1b4eb38d4f0feb1c69447d9884da","modified":1516238752241},{"_id":"public/tags/promise-resolve/index.html","hash":"76d3737198ec46e0fc15887f0beef56a03cd153c","modified":1516238752241},{"_id":"public/tags/promise-reject/index.html","hash":"06a8981a4c0d4019cf7ce064e6108b2fddff6407","modified":1516238752241},{"_id":"public/tags/mongodb/index.html","hash":"2be9526bd124a0587e05ad84a24200d19c9e9607","modified":1516238752241},{"_id":"public/tags/mongo/index.html","hash":"ae1586eab17eae0c59a4f485eaad8bb816796168","modified":1516238752241},{"_id":"public/tags/Mongodb/index.html","hash":"292f95ea0a3f3e9d4b3f8dff80e7faeed5f7b360","modified":1516238752241},{"_id":"public/tags/Mongo/index.html","hash":"0ec161543df14be48cc33ccec5ff444cd821ed10","modified":1516238752241},{"_id":"public/tags/linux/index.html","hash":"d1e059f02222150ef27ce0d4f4e0ec11fe74dd59","modified":1516238752241},{"_id":"public/tags/Linux/index.html","hash":"6c7047822f96022a2474883e2003be12f38d7541","modified":1516238752241},{"_id":"public/tags/mac/index.html","hash":"86009bfb8ffd549c98d289dde2c803923095f065","modified":1516238752241},{"_id":"public/tags/Mac/index.html","hash":"668cb62bf05852464bcf36be8bf55cb68b8c183c","modified":1516238752241},{"_id":"public/2018/01/16/javascript/eventLoop/index.html","hash":"db987e55c31de4d742e82260d734f317cf530aa1","modified":1516238752241},{"_id":"public/2018/01/11/javascript/promise/index.html","hash":"dfffc0af879a716d5da1220c9f71d162de7cfae5","modified":1516238752241},{"_id":"public/2018/01/07/mongodb/mongo-install-linux/index.html","hash":"bda39dec10479230090c5230adb70b6b7bc3e2b1","modified":1516238752241},{"_id":"public/2018/01/06/mongodb/mongo-install-mac/index.html","hash":"1592cf6b1ec0c86649c7bb8b40073e6367329fb0","modified":1516238752241},{"_id":"public/index.html","hash":"082c5cf839644f9ee272dfc9e6b419698d420f44","modified":1516238752241},{"_id":"public/CNAME","hash":"e62710ea473fa3e11f87711cef1079ff7279f68b","modified":1516238752278},{"_id":"public/README","hash":"721de4e1c251ea20ef615f752289e36b94258b3f","modified":1516238752278},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1516238752278},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1516238752278},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1516238752278},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1516238752278},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1516238752278},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1516238752278},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1516238752278},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1516238752279},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1516238752279},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1516238752279},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1516238752279},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1516238752279},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1516238752279},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1516238752279},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1516238752279},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1516238752279},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1516238752279},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1516238752279},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1516238752280},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1516238752280},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1516238752280},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1516238752280},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1516238752280},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1516238752280},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1516238752280},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1516238752280},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1516238752280},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1516238752280},{"_id":"public/2018/01/16/javascript/eventLoop/eventloop.png","hash":"991109df2ef5ae00d95568a69200baa1775ed399","modified":1516238752280},{"_id":"public/2018/01/16/javascript/eventLoop/nodesystem.png","hash":"3d70f3625caf91da22c6ab7dc294e9e7e1559b2a","modified":1516238752280},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1516238752751},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1516238752756},{"_id":"public/2018/01/07/mongodb/mongo-install-linux/mongohub.png","hash":"1957d967f1d3f3211950e40e3ff47c50f2a390dc","modified":1516238752760},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1516238752765},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1516238752765},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1516238752765},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1516238752765},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1516238752765},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1516238752765},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1516238752765},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1516238752765},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1516238752765},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1516238752765},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1516238752765},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1516238752765},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1516238752765},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1516238752765},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1516238752765},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1516238752765},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1516238752765},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1516238752765},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1516238752766},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1516238752766},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1516238752766},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1516238752766},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1516238752766},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1516238752766},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1516238752766},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1516238752766},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1516238752766},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1516238752766},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1516238752766},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1516238752766},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1516238752766},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1516238752766},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1516238752766},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1516238752766},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1516238752766},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1516238752766},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1516238752766},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1516238752766},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1516238752766},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1516238752767},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1516238752767},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1516238752767},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1516238752767},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1516238752767},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1516238752767},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1516238752767},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1516238752767},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1516238752767},{"_id":"public/css/main.css","hash":"ce0ef1dd3ee12fc878baab31e145ad48f51b97fc","modified":1516238752767},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1516238752767},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1516238752767},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1516238752767},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1516238752767},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1516238752767},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1516238752767},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1516238752767},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1516238752767},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1516238752768},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1516238752768},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1516238752768},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1516238752768},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1516238752768},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1516238752768},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1516238752768},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1516238752768},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1516238752768},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1516238752768},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1516238752768},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1516238752769},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1516238752769},{"_id":"public/2018/01/16/javascript/eventLoop/eventloop-setTimeout0-file.png","hash":"cf38c7c54dd22d305602abca3e9f679a217cef10","modified":1516238752769},{"_id":"public/2018/01/16/javascript/eventLoop/eventloop-setTimeout0-unfile.png","hash":"1175ac208e6de4e40af5cda919a3cb12d341f6bf","modified":1516238752769},{"_id":"public/2018/01/16/javascript/eventLoop/eventloop-setTimeout100-file.png","hash":"62e554c0bbeba671fc2304201f5de45d0b5b2479","modified":1516238752769},{"_id":"public/2018/01/16/javascript/eventLoop/eventloop-setTimeout100-unfile.png","hash":"aaf03acc83e07d8ed2e7daf39acef96d2a35e63f","modified":1516238752769},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1516238752780}],"Category":[{"name":"javascript","_id":"cjcjtejfq0004x8xbgfvqqrju"},{"name":"Mongodb","_id":"cjcjtejg2000ax8xbpc623qvu"}],"Data":[],"Page":[{"title":"分类","date":"2018-01-11T07:03:39.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-01-11 15:03:39\ntype: \"categories\"\n---","updated":"2018-01-11T21:19:49.498Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjcjteja50000x8xbtm4ft41n","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-01-11T06:58:47.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-01-11 14:58:47\ntype: \"tags\"\n---\n","updated":"2018-01-11T21:19:54.696Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjcjtejeo0001x8xbp3lkb3x8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Javascript 运行机制详解，Event Loop","date":"2018-01-15T16:00:00.000Z","_content":"\n#### javascript的运行机制，Event Loop\n\n## 单线程\n### javascript为什么是单线程语言，原因在于如果是多线程，当一个线程对DOM节点做添加内容操作的时候，另一个线程要删除这个DOM节点，这个时候，浏览器应该怎么选择，这就造成了混乱，为了解决这类问题，在一开始的时候，javascript就采用单线程模式。\n## 在后面H5出的web worker标准的时候，看似是多线程，其实是在一个主线程来控制其他线程，而且不能操作DOM，所以本质还是单线程\n\n## 任务队列\n### 任务可以分为两种，一种为同步，另一种为异步（具有回调函数）。如下图：\n![](eventloop/eventloop.png)\n### 所有的同步任务都在主线程上执行，形成一个执行栈 stack。当所有同步任务执行完毕后，它会去执行microtask queue中的异步任务（nextTick，Promise），将他们全部执行。主线程之外还有一个任务队列task queue，当有异步任务（DOM，AJAX，setTimeout，setImmediate）有结果的时候，就在任务队列里放一个事件，一旦执行栈和microtask queue任务执行完毕，系统就会读取任务队列，将取出排在最前面的事件加入执行栈执行，这种机制就是任务队列。\n\n## Event Loop\n### 主线程在任务队列中读取事件，这个过程是循环不断地，所以这种运行机制叫做Event Loop（事件循环）\n\n## nextTick、setImmediate、setTimeout\n### nextTick是在执行栈同步代码结束之后，下一次Event Loop（任务队列）执行之前。当所有同步任务执行完，会在queue中执行nextTick，无论nextTick有多少层回调，都会执行完毕后再去任务队列，所以会造成一直停留在当前执行栈，无法执行任务队列，请看下面代码\n``` bash\nprocess.nextTick(function () {\n    console.log('nextTick1');\n    process.nextTick(function (){console.log('nextTick2')});\n});\n  \nsetTimeout(function timeout() {\n    console.log('setTimeout');\n}, 0)\n```\n### 执行完毕后输出nextTick1、nextTick2、setTimeout，原因是nextTick是在当前执行栈末尾执行，而setTimeout是在下次任务队列在执行\n\n### setImmediate方法是在Event Loop（任务队列）末尾，也就是下一次Event Loop时执行。\n### setTimeout方法是按照执行时间，放入任务队列，有时快与setImmediate有时慢。请看以下代码\n``` bash\nsetImmediate(function () {\n    console.log('setImmediate1');\n    setImmediate(function (){console.log('setImmediate2')});\n});\n  \nsetTimeout(function timeout() {\n    console.log('setTimeout');\n}, 0);\n```\n### 这段代码执行完可能是setImmediate1、setTimeout、setImmediate2，也可能是setTimeout、setImmediate1、setImmediate2，原因是setTimeout和setImmediate1都是在下次Event Loop中触发，所以先后不确定，但是setImmediate2肯定是最后，因为他是在setImmediate1任务队列之后，也就是下下次Event Loop执行\n\n## Node.js的Event Loop\n### Node.js也是单线程的Event Loop但是和浏览器有些区别，如图所示，\n### 1.先通过Chrom V8引擎解析Javascript脚本\n### 2.解析完毕后调用Node API\n### 3.LIBUV库负责Node API的执行，将不同任务分配给不同的线程，形成一个Event Loop（任务队列）\n### 4.最后Chrom V8引擎将结果返回给用户\n![](/eventloop/nodesystem.png)\n\n## Node.js Event Loop原理\n### node.js的特点是事件驱动，非阻塞单线程。当应用程序需要I/O操作的时候，线程并不会阻塞，而是把I/O操作交给底层库（LIBUV）。此时node线程会去处理其他任务，当底层库处理完I/O操作后，会将主动权交还给Node线程，所以Event Loop的用处是调度线程，例如：当底层库处理I/O操作后调度Node线程处理后续工作，所以虽然node是单线程，但是底层库处理操作依然是多线程\n\n## Node Event Loop的事件处理机制\n``` bash\n   ┌───────────────────────┐\n\n┌─>│        timers         │\n\n│  └──────────┬────────────┘\n\n│  ┌──────────┴────────────┐\n\n│  │     I/O callbacks     │\n\n│  └──────────┬────────────┘\n\n│  ┌──────────┴────────────┐\n\n│  │     idle, prepare     │\n\n│  └──────────┬────────────┘      ┌───────────────┐\n\n│  ┌──────────┴────────────┐      │   incoming:   │\n\n│  │         poll          │<─────┤  connections, │\n\n│  └──────────┬────────────┘      │   data, etc.  │\n\n│  ┌──────────┴────────────┐      └───────────────┘\n\n│  │        check          │\n\n│  └──────────┬────────────┘\n\n│  ┌──────────┴────────────┐\n\n└──┤    close callbacks    │\n\n   └───────────────────────┘\n```\n### 上面处理阶段都是按照先进先出的规则执行回调函数，按顺序执行，直到队列为空或是该阶段执行的回调函数达到该阶段所允许一次执行回调函数的最大限制后，才会将操作权移交给下一阶段。\n- timers: 用来检查setTimeout()和setInterval()定时器是否到期，如果到期则执行它，否则下一阶段\n- I/O callbacks: 用来处理timers阶段、setImmediate、和TCP他们的异常回调函数或者error\n- idle, prepare: nodejs内部函数调用，在循环被I/O阻塞之前prepare回调就会立即调用\n- poll: 用来监听fd的事件的，比如socket的可读，可写，文件的可读可等等\n- check: setImmediate()函数只会在这个阶段执行\n- close callbacks: 执行一些诸如关闭事件的回调函数，如socket.on('close', ...)\n\n## 具体分析，看下图：\n### 1.当setTimeout时间最小，读取文件不存在的时候\n![](/eventloop/eventloop-setTimeout0-unfile.png)\n### 如图所示，分别是nextTick、readFile、setTimeout、setImmediate，然而现在并没有1.txt和2.txt文件，输出结果是next Tick、setTimeout、readFile、setImmediate，在event loop中先判断的是timeers，最先出书next Tick因为process.nextTick的实现是基于v8 MicroTask(是在当前js call stack 中没有可执行代码才会执行的队列,低于js call stack 代码，但高于事件循环，不属于Event Loop，上面javascript的Event Loop介绍过了，所以最先输出。然后开始走Event Loop，第一阶段是timers，判断setTimeout到期，所以输出setTimeout，进入下一阶段，poll将I/O操作权交出，新线程操作，但是并没有相关读取文件，所以直接返回回调函数，所以处处readFile，最后到check阶段，输出setImmediate\n\n### 2.当setTimeout时间最小，读取文件存在的时候\n![](/eventloop/eventloop-setTimeout0-file.png)\n### 如图所示，分别是nextTick、setTimeout、setImmediate、readFile，这次readFile在最后面，是因为文件存在，执行到poll阶段的时候，执行I/O操作，node线程开始执行check阶段，当交出的I/O操作结束后，返回给Event Loop所以再执行readFile的回调函数，所以他在最后面\n\n### 3.当setTimeout时间为100毫秒，读取文件不存在的时候\n![](/eventloop/eventloop-setTimeout100-unfile.png)\n### 如图所示，分别是nextTick、readFile、setImmediate、setTimeout，它和1不同的地方是setTimeout排在最后了，这是因为在执行timers的时候，setTimeout没有到期，所以直接执行下一阶段，当执行完poll的时候，会去执行查看定时器有没有到期，如果没有下一次Event Loop再次查看，知道定时器到期，所以他在最后面\n\n### 4.当setTimeout时间为100毫秒，读取文件存在的时候\n![](/eventloop/eventloop-setTimeout100-file.png)\n### 如图所示，分别是nextTick、setImmediate、readFile、setTimeout，它和2的区别是setTimeout在最后，原因和3一样。\n\n## 总结一下\n### 1.javascript和node.js都是单线程，但是node底层是多线程操作\n### 2.Event Loop —— 任务队列\n### 3.当同时设置nextTick, setImmediate, setTimeout时一定是nextTick先执行，nextTick不属于Event LOop，它属于v8的micro tasks，并且会阻塞Event Loop\n### 4.setImmediate，setTimeout属于Event Loop但是，直接阶段不同\n\n\n\n\n\n\n\n\n","source":"_posts/javascript/eventLoop.md","raw":"---\ntitle: Javascript 运行机制详解，Event Loop\ndate: 2018/01/16\ncategories:\n- javascript\ntags:\n- javascript\n- event loop\n- Event Loop\n- Node\n- Node.js\n- node\n- node.js\n---\n\n#### javascript的运行机制，Event Loop\n\n## 单线程\n### javascript为什么是单线程语言，原因在于如果是多线程，当一个线程对DOM节点做添加内容操作的时候，另一个线程要删除这个DOM节点，这个时候，浏览器应该怎么选择，这就造成了混乱，为了解决这类问题，在一开始的时候，javascript就采用单线程模式。\n## 在后面H5出的web worker标准的时候，看似是多线程，其实是在一个主线程来控制其他线程，而且不能操作DOM，所以本质还是单线程\n\n## 任务队列\n### 任务可以分为两种，一种为同步，另一种为异步（具有回调函数）。如下图：\n![](eventloop/eventloop.png)\n### 所有的同步任务都在主线程上执行，形成一个执行栈 stack。当所有同步任务执行完毕后，它会去执行microtask queue中的异步任务（nextTick，Promise），将他们全部执行。主线程之外还有一个任务队列task queue，当有异步任务（DOM，AJAX，setTimeout，setImmediate）有结果的时候，就在任务队列里放一个事件，一旦执行栈和microtask queue任务执行完毕，系统就会读取任务队列，将取出排在最前面的事件加入执行栈执行，这种机制就是任务队列。\n\n## Event Loop\n### 主线程在任务队列中读取事件，这个过程是循环不断地，所以这种运行机制叫做Event Loop（事件循环）\n\n## nextTick、setImmediate、setTimeout\n### nextTick是在执行栈同步代码结束之后，下一次Event Loop（任务队列）执行之前。当所有同步任务执行完，会在queue中执行nextTick，无论nextTick有多少层回调，都会执行完毕后再去任务队列，所以会造成一直停留在当前执行栈，无法执行任务队列，请看下面代码\n``` bash\nprocess.nextTick(function () {\n    console.log('nextTick1');\n    process.nextTick(function (){console.log('nextTick2')});\n});\n  \nsetTimeout(function timeout() {\n    console.log('setTimeout');\n}, 0)\n```\n### 执行完毕后输出nextTick1、nextTick2、setTimeout，原因是nextTick是在当前执行栈末尾执行，而setTimeout是在下次任务队列在执行\n\n### setImmediate方法是在Event Loop（任务队列）末尾，也就是下一次Event Loop时执行。\n### setTimeout方法是按照执行时间，放入任务队列，有时快与setImmediate有时慢。请看以下代码\n``` bash\nsetImmediate(function () {\n    console.log('setImmediate1');\n    setImmediate(function (){console.log('setImmediate2')});\n});\n  \nsetTimeout(function timeout() {\n    console.log('setTimeout');\n}, 0);\n```\n### 这段代码执行完可能是setImmediate1、setTimeout、setImmediate2，也可能是setTimeout、setImmediate1、setImmediate2，原因是setTimeout和setImmediate1都是在下次Event Loop中触发，所以先后不确定，但是setImmediate2肯定是最后，因为他是在setImmediate1任务队列之后，也就是下下次Event Loop执行\n\n## Node.js的Event Loop\n### Node.js也是单线程的Event Loop但是和浏览器有些区别，如图所示，\n### 1.先通过Chrom V8引擎解析Javascript脚本\n### 2.解析完毕后调用Node API\n### 3.LIBUV库负责Node API的执行，将不同任务分配给不同的线程，形成一个Event Loop（任务队列）\n### 4.最后Chrom V8引擎将结果返回给用户\n![](/eventloop/nodesystem.png)\n\n## Node.js Event Loop原理\n### node.js的特点是事件驱动，非阻塞单线程。当应用程序需要I/O操作的时候，线程并不会阻塞，而是把I/O操作交给底层库（LIBUV）。此时node线程会去处理其他任务，当底层库处理完I/O操作后，会将主动权交还给Node线程，所以Event Loop的用处是调度线程，例如：当底层库处理I/O操作后调度Node线程处理后续工作，所以虽然node是单线程，但是底层库处理操作依然是多线程\n\n## Node Event Loop的事件处理机制\n``` bash\n   ┌───────────────────────┐\n\n┌─>│        timers         │\n\n│  └──────────┬────────────┘\n\n│  ┌──────────┴────────────┐\n\n│  │     I/O callbacks     │\n\n│  └──────────┬────────────┘\n\n│  ┌──────────┴────────────┐\n\n│  │     idle, prepare     │\n\n│  └──────────┬────────────┘      ┌───────────────┐\n\n│  ┌──────────┴────────────┐      │   incoming:   │\n\n│  │         poll          │<─────┤  connections, │\n\n│  └──────────┬────────────┘      │   data, etc.  │\n\n│  ┌──────────┴────────────┐      └───────────────┘\n\n│  │        check          │\n\n│  └──────────┬────────────┘\n\n│  ┌──────────┴────────────┐\n\n└──┤    close callbacks    │\n\n   └───────────────────────┘\n```\n### 上面处理阶段都是按照先进先出的规则执行回调函数，按顺序执行，直到队列为空或是该阶段执行的回调函数达到该阶段所允许一次执行回调函数的最大限制后，才会将操作权移交给下一阶段。\n- timers: 用来检查setTimeout()和setInterval()定时器是否到期，如果到期则执行它，否则下一阶段\n- I/O callbacks: 用来处理timers阶段、setImmediate、和TCP他们的异常回调函数或者error\n- idle, prepare: nodejs内部函数调用，在循环被I/O阻塞之前prepare回调就会立即调用\n- poll: 用来监听fd的事件的，比如socket的可读，可写，文件的可读可等等\n- check: setImmediate()函数只会在这个阶段执行\n- close callbacks: 执行一些诸如关闭事件的回调函数，如socket.on('close', ...)\n\n## 具体分析，看下图：\n### 1.当setTimeout时间最小，读取文件不存在的时候\n![](/eventloop/eventloop-setTimeout0-unfile.png)\n### 如图所示，分别是nextTick、readFile、setTimeout、setImmediate，然而现在并没有1.txt和2.txt文件，输出结果是next Tick、setTimeout、readFile、setImmediate，在event loop中先判断的是timeers，最先出书next Tick因为process.nextTick的实现是基于v8 MicroTask(是在当前js call stack 中没有可执行代码才会执行的队列,低于js call stack 代码，但高于事件循环，不属于Event Loop，上面javascript的Event Loop介绍过了，所以最先输出。然后开始走Event Loop，第一阶段是timers，判断setTimeout到期，所以输出setTimeout，进入下一阶段，poll将I/O操作权交出，新线程操作，但是并没有相关读取文件，所以直接返回回调函数，所以处处readFile，最后到check阶段，输出setImmediate\n\n### 2.当setTimeout时间最小，读取文件存在的时候\n![](/eventloop/eventloop-setTimeout0-file.png)\n### 如图所示，分别是nextTick、setTimeout、setImmediate、readFile，这次readFile在最后面，是因为文件存在，执行到poll阶段的时候，执行I/O操作，node线程开始执行check阶段，当交出的I/O操作结束后，返回给Event Loop所以再执行readFile的回调函数，所以他在最后面\n\n### 3.当setTimeout时间为100毫秒，读取文件不存在的时候\n![](/eventloop/eventloop-setTimeout100-unfile.png)\n### 如图所示，分别是nextTick、readFile、setImmediate、setTimeout，它和1不同的地方是setTimeout排在最后了，这是因为在执行timers的时候，setTimeout没有到期，所以直接执行下一阶段，当执行完poll的时候，会去执行查看定时器有没有到期，如果没有下一次Event Loop再次查看，知道定时器到期，所以他在最后面\n\n### 4.当setTimeout时间为100毫秒，读取文件存在的时候\n![](/eventloop/eventloop-setTimeout100-file.png)\n### 如图所示，分别是nextTick、setImmediate、readFile、setTimeout，它和2的区别是setTimeout在最后，原因和3一样。\n\n## 总结一下\n### 1.javascript和node.js都是单线程，但是node底层是多线程操作\n### 2.Event Loop —— 任务队列\n### 3.当同时设置nextTick, setImmediate, setTimeout时一定是nextTick先执行，nextTick不属于Event LOop，它属于v8的micro tasks，并且会阻塞Event Loop\n### 4.setImmediate，setTimeout属于Event Loop但是，直接阶段不同\n\n\n\n\n\n\n\n\n","slug":"javascript/eventLoop","published":1,"updated":"2018-01-18T01:25:37.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcjtejfl0002x8xbdu3h1dqi","content":"<h4 id=\"javascript的运行机制，Event-Loop\"><a href=\"#javascript的运行机制，Event-Loop\" class=\"headerlink\" title=\"javascript的运行机制，Event Loop\"></a>javascript的运行机制，Event Loop</h4><h2 id=\"单线程\"><a href=\"#单线程\" class=\"headerlink\" title=\"单线程\"></a>单线程</h2><h3 id=\"javascript为什么是单线程语言，原因在于如果是多线程，当一个线程对DOM节点做添加内容操作的时候，另一个线程要删除这个DOM节点，这个时候，浏览器应该怎么选择，这就造成了混乱，为了解决这类问题，在一开始的时候，javascript就采用单线程模式。\"><a href=\"#javascript为什么是单线程语言，原因在于如果是多线程，当一个线程对DOM节点做添加内容操作的时候，另一个线程要删除这个DOM节点，这个时候，浏览器应该怎么选择，这就造成了混乱，为了解决这类问题，在一开始的时候，javascript就采用单线程模式。\" class=\"headerlink\" title=\"javascript为什么是单线程语言，原因在于如果是多线程，当一个线程对DOM节点做添加内容操作的时候，另一个线程要删除这个DOM节点，这个时候，浏览器应该怎么选择，这就造成了混乱，为了解决这类问题，在一开始的时候，javascript就采用单线程模式。\"></a>javascript为什么是单线程语言，原因在于如果是多线程，当一个线程对DOM节点做添加内容操作的时候，另一个线程要删除这个DOM节点，这个时候，浏览器应该怎么选择，这就造成了混乱，为了解决这类问题，在一开始的时候，javascript就采用单线程模式。</h3><h2 id=\"在后面H5出的web-worker标准的时候，看似是多线程，其实是在一个主线程来控制其他线程，而且不能操作DOM，所以本质还是单线程\"><a href=\"#在后面H5出的web-worker标准的时候，看似是多线程，其实是在一个主线程来控制其他线程，而且不能操作DOM，所以本质还是单线程\" class=\"headerlink\" title=\"在后面H5出的web worker标准的时候，看似是多线程，其实是在一个主线程来控制其他线程，而且不能操作DOM，所以本质还是单线程\"></a>在后面H5出的web worker标准的时候，看似是多线程，其实是在一个主线程来控制其他线程，而且不能操作DOM，所以本质还是单线程</h2><h2 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h2><h3 id=\"任务可以分为两种，一种为同步，另一种为异步（具有回调函数）。如下图：\"><a href=\"#任务可以分为两种，一种为同步，另一种为异步（具有回调函数）。如下图：\" class=\"headerlink\" title=\"任务可以分为两种，一种为同步，另一种为异步（具有回调函数）。如下图：\"></a>任务可以分为两种，一种为同步，另一种为异步（具有回调函数）。如下图：</h3><p><img src=\"/2018/01/16/javascript/eventLoop/eventloop.png\" alt=\"\"></p>\n<h3 id=\"所有的同步任务都在主线程上执行，形成一个执行栈-stack。当所有同步任务执行完毕后，它会去执行microtask-queue中的异步任务（nextTick，Promise），将他们全部执行。主线程之外还有一个任务队列task-queue，当有异步任务（DOM，AJAX，setTimeout，setImmediate）有结果的时候，就在任务队列里放一个事件，一旦执行栈和microtask-queue任务执行完毕，系统就会读取任务队列，将取出排在最前面的事件加入执行栈执行，这种机制就是任务队列。\"><a href=\"#所有的同步任务都在主线程上执行，形成一个执行栈-stack。当所有同步任务执行完毕后，它会去执行microtask-queue中的异步任务（nextTick，Promise），将他们全部执行。主线程之外还有一个任务队列task-queue，当有异步任务（DOM，AJAX，setTimeout，setImmediate）有结果的时候，就在任务队列里放一个事件，一旦执行栈和microtask-queue任务执行完毕，系统就会读取任务队列，将取出排在最前面的事件加入执行栈执行，这种机制就是任务队列。\" class=\"headerlink\" title=\"所有的同步任务都在主线程上执行，形成一个执行栈 stack。当所有同步任务执行完毕后，它会去执行microtask queue中的异步任务（nextTick，Promise），将他们全部执行。主线程之外还有一个任务队列task queue，当有异步任务（DOM，AJAX，setTimeout，setImmediate）有结果的时候，就在任务队列里放一个事件，一旦执行栈和microtask queue任务执行完毕，系统就会读取任务队列，将取出排在最前面的事件加入执行栈执行，这种机制就是任务队列。\"></a>所有的同步任务都在主线程上执行，形成一个执行栈 stack。当所有同步任务执行完毕后，它会去执行microtask queue中的异步任务（nextTick，Promise），将他们全部执行。主线程之外还有一个任务队列task queue，当有异步任务（DOM，AJAX，setTimeout，setImmediate）有结果的时候，就在任务队列里放一个事件，一旦执行栈和microtask queue任务执行完毕，系统就会读取任务队列，将取出排在最前面的事件加入执行栈执行，这种机制就是任务队列。</h3><h2 id=\"Event-Loop\"><a href=\"#Event-Loop\" class=\"headerlink\" title=\"Event Loop\"></a>Event Loop</h2><h3 id=\"主线程在任务队列中读取事件，这个过程是循环不断地，所以这种运行机制叫做Event-Loop（事件循环）\"><a href=\"#主线程在任务队列中读取事件，这个过程是循环不断地，所以这种运行机制叫做Event-Loop（事件循环）\" class=\"headerlink\" title=\"主线程在任务队列中读取事件，这个过程是循环不断地，所以这种运行机制叫做Event Loop（事件循环）\"></a>主线程在任务队列中读取事件，这个过程是循环不断地，所以这种运行机制叫做Event Loop（事件循环）</h3><h2 id=\"nextTick、setImmediate、setTimeout\"><a href=\"#nextTick、setImmediate、setTimeout\" class=\"headerlink\" title=\"nextTick、setImmediate、setTimeout\"></a>nextTick、setImmediate、setTimeout</h2><h3 id=\"nextTick是在执行栈同步代码结束之后，下一次Event-Loop（任务队列）执行之前。当所有同步任务执行完，会在queue中执行nextTick，无论nextTick有多少层回调，都会执行完毕后再去任务队列，所以会造成一直停留在当前执行栈，无法执行任务队列，请看下面代码\"><a href=\"#nextTick是在执行栈同步代码结束之后，下一次Event-Loop（任务队列）执行之前。当所有同步任务执行完，会在queue中执行nextTick，无论nextTick有多少层回调，都会执行完毕后再去任务队列，所以会造成一直停留在当前执行栈，无法执行任务队列，请看下面代码\" class=\"headerlink\" title=\"nextTick是在执行栈同步代码结束之后，下一次Event Loop（任务队列）执行之前。当所有同步任务执行完，会在queue中执行nextTick，无论nextTick有多少层回调，都会执行完毕后再去任务队列，所以会造成一直停留在当前执行栈，无法执行任务队列，请看下面代码\"></a>nextTick是在执行栈同步代码结束之后，下一次Event Loop（任务队列）执行之前。当所有同步任务执行完，会在queue中执行nextTick，无论nextTick有多少层回调，都会执行完毕后再去任务队列，所以会造成一直停留在当前执行栈，无法执行任务队列，请看下面代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'nextTick1'</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;console.log(<span class=\"string\">'nextTick2'</span>)&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">setTimeout(<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">timeout</span></span>() &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'setTimeout'</span>);</span><br><span class=\"line\">&#125;, 0)</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行完毕后输出nextTick1、nextTick2、setTimeout，原因是nextTick是在当前执行栈末尾执行，而setTimeout是在下次任务队列在执行\"><a href=\"#执行完毕后输出nextTick1、nextTick2、setTimeout，原因是nextTick是在当前执行栈末尾执行，而setTimeout是在下次任务队列在执行\" class=\"headerlink\" title=\"执行完毕后输出nextTick1、nextTick2、setTimeout，原因是nextTick是在当前执行栈末尾执行，而setTimeout是在下次任务队列在执行\"></a>执行完毕后输出nextTick1、nextTick2、setTimeout，原因是nextTick是在当前执行栈末尾执行，而setTimeout是在下次任务队列在执行</h3><h3 id=\"setImmediate方法是在Event-Loop（任务队列）末尾，也就是下一次Event-Loop时执行。\"><a href=\"#setImmediate方法是在Event-Loop（任务队列）末尾，也就是下一次Event-Loop时执行。\" class=\"headerlink\" title=\"setImmediate方法是在Event Loop（任务队列）末尾，也就是下一次Event Loop时执行。\"></a>setImmediate方法是在Event Loop（任务队列）末尾，也就是下一次Event Loop时执行。</h3><h3 id=\"setTimeout方法是按照执行时间，放入任务队列，有时快与setImmediate有时慢。请看以下代码\"><a href=\"#setTimeout方法是按照执行时间，放入任务队列，有时快与setImmediate有时慢。请看以下代码\" class=\"headerlink\" title=\"setTimeout方法是按照执行时间，放入任务队列，有时快与setImmediate有时慢。请看以下代码\"></a>setTimeout方法是按照执行时间，放入任务队列，有时快与setImmediate有时慢。请看以下代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'setImmediate1'</span>);</span><br><span class=\"line\">    setImmediate(<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;console.log(<span class=\"string\">'setImmediate2'</span>)&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">setTimeout(<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">timeout</span></span>() &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'setTimeout'</span>);</span><br><span class=\"line\">&#125;, 0);</span><br></pre></td></tr></table></figure>\n<h3 id=\"这段代码执行完可能是setImmediate1、setTimeout、setImmediate2，也可能是setTimeout、setImmediate1、setImmediate2，原因是setTimeout和setImmediate1都是在下次Event-Loop中触发，所以先后不确定，但是setImmediate2肯定是最后，因为他是在setImmediate1任务队列之后，也就是下下次Event-Loop执行\"><a href=\"#这段代码执行完可能是setImmediate1、setTimeout、setImmediate2，也可能是setTimeout、setImmediate1、setImmediate2，原因是setTimeout和setImmediate1都是在下次Event-Loop中触发，所以先后不确定，但是setImmediate2肯定是最后，因为他是在setImmediate1任务队列之后，也就是下下次Event-Loop执行\" class=\"headerlink\" title=\"这段代码执行完可能是setImmediate1、setTimeout、setImmediate2，也可能是setTimeout、setImmediate1、setImmediate2，原因是setTimeout和setImmediate1都是在下次Event Loop中触发，所以先后不确定，但是setImmediate2肯定是最后，因为他是在setImmediate1任务队列之后，也就是下下次Event Loop执行\"></a>这段代码执行完可能是setImmediate1、setTimeout、setImmediate2，也可能是setTimeout、setImmediate1、setImmediate2，原因是setTimeout和setImmediate1都是在下次Event Loop中触发，所以先后不确定，但是setImmediate2肯定是最后，因为他是在setImmediate1任务队列之后，也就是下下次Event Loop执行</h3><h2 id=\"Node-js的Event-Loop\"><a href=\"#Node-js的Event-Loop\" class=\"headerlink\" title=\"Node.js的Event Loop\"></a>Node.js的Event Loop</h2><h3 id=\"Node-js也是单线程的Event-Loop但是和浏览器有些区别，如图所示，\"><a href=\"#Node-js也是单线程的Event-Loop但是和浏览器有些区别，如图所示，\" class=\"headerlink\" title=\"Node.js也是单线程的Event Loop但是和浏览器有些区别，如图所示，\"></a>Node.js也是单线程的Event Loop但是和浏览器有些区别，如图所示，</h3><h3 id=\"1-先通过Chrom-V8引擎解析Javascript脚本\"><a href=\"#1-先通过Chrom-V8引擎解析Javascript脚本\" class=\"headerlink\" title=\"1.先通过Chrom V8引擎解析Javascript脚本\"></a>1.先通过Chrom V8引擎解析Javascript脚本</h3><h3 id=\"2-解析完毕后调用Node-API\"><a href=\"#2-解析完毕后调用Node-API\" class=\"headerlink\" title=\"2.解析完毕后调用Node API\"></a>2.解析完毕后调用Node API</h3><h3 id=\"3-LIBUV库负责Node-API的执行，将不同任务分配给不同的线程，形成一个Event-Loop（任务队列）\"><a href=\"#3-LIBUV库负责Node-API的执行，将不同任务分配给不同的线程，形成一个Event-Loop（任务队列）\" class=\"headerlink\" title=\"3.LIBUV库负责Node API的执行，将不同任务分配给不同的线程，形成一个Event Loop（任务队列）\"></a>3.LIBUV库负责Node API的执行，将不同任务分配给不同的线程，形成一个Event Loop（任务队列）</h3><h3 id=\"4-最后Chrom-V8引擎将结果返回给用户\"><a href=\"#4-最后Chrom-V8引擎将结果返回给用户\" class=\"headerlink\" title=\"4.最后Chrom V8引擎将结果返回给用户\"></a>4.最后Chrom V8引擎将结果返回给用户</h3><p><img src=\"/eventloop/nodesystem.png\" alt=\"\"></p>\n<h2 id=\"Node-js-Event-Loop原理\"><a href=\"#Node-js-Event-Loop原理\" class=\"headerlink\" title=\"Node.js Event Loop原理\"></a>Node.js Event Loop原理</h2><h3 id=\"node-js的特点是事件驱动，非阻塞单线程。当应用程序需要I-O操作的时候，线程并不会阻塞，而是把I-O操作交给底层库（LIBUV）。此时node线程会去处理其他任务，当底层库处理完I-O操作后，会将主动权交还给Node线程，所以Event-Loop的用处是调度线程，例如：当底层库处理I-O操作后调度Node线程处理后续工作，所以虽然node是单线程，但是底层库处理操作依然是多线程\"><a href=\"#node-js的特点是事件驱动，非阻塞单线程。当应用程序需要I-O操作的时候，线程并不会阻塞，而是把I-O操作交给底层库（LIBUV）。此时node线程会去处理其他任务，当底层库处理完I-O操作后，会将主动权交还给Node线程，所以Event-Loop的用处是调度线程，例如：当底层库处理I-O操作后调度Node线程处理后续工作，所以虽然node是单线程，但是底层库处理操作依然是多线程\" class=\"headerlink\" title=\"node.js的特点是事件驱动，非阻塞单线程。当应用程序需要I/O操作的时候，线程并不会阻塞，而是把I/O操作交给底层库（LIBUV）。此时node线程会去处理其他任务，当底层库处理完I/O操作后，会将主动权交还给Node线程，所以Event Loop的用处是调度线程，例如：当底层库处理I/O操作后调度Node线程处理后续工作，所以虽然node是单线程，但是底层库处理操作依然是多线程\"></a>node.js的特点是事件驱动，非阻塞单线程。当应用程序需要I/O操作的时候，线程并不会阻塞，而是把I/O操作交给底层库（LIBUV）。此时node线程会去处理其他任务，当底层库处理完I/O操作后，会将主动权交还给Node线程，所以Event Loop的用处是调度线程，例如：当底层库处理I/O操作后调度Node线程处理后续工作，所以虽然node是单线程，但是底层库处理操作依然是多线程</h3><h2 id=\"Node-Event-Loop的事件处理机制\"><a href=\"#Node-Event-Loop的事件处理机制\" class=\"headerlink\" title=\"Node Event Loop的事件处理机制\"></a>Node Event Loop的事件处理机制</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   ┌───────────────────────┐</span><br><span class=\"line\"></span><br><span class=\"line\">┌─&gt;│        timers         │</span><br><span class=\"line\"></span><br><span class=\"line\">│  └──────────┬────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">│  ┌──────────┴────────────┐</span><br><span class=\"line\"></span><br><span class=\"line\">│  │     I/O callbacks     │</span><br><span class=\"line\"></span><br><span class=\"line\">│  └──────────┬────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">│  ┌──────────┴────────────┐</span><br><span class=\"line\"></span><br><span class=\"line\">│  │     idle, prepare     │</span><br><span class=\"line\"></span><br><span class=\"line\">│  └──────────┬────────────┘      ┌───────────────┐</span><br><span class=\"line\"></span><br><span class=\"line\">│  ┌──────────┴────────────┐      │   incoming:   │</span><br><span class=\"line\"></span><br><span class=\"line\">│  │         poll          │&lt;─────┤  connections, │</span><br><span class=\"line\"></span><br><span class=\"line\">│  └──────────┬────────────┘      │   data, etc.  │</span><br><span class=\"line\"></span><br><span class=\"line\">│  ┌──────────┴────────────┐      └───────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">│  │        check          │</span><br><span class=\"line\"></span><br><span class=\"line\">│  └──────────┬────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">│  ┌──────────┴────────────┐</span><br><span class=\"line\"></span><br><span class=\"line\">└──┤    close callbacks    │</span><br><span class=\"line\"></span><br><span class=\"line\">   └───────────────────────┘</span><br></pre></td></tr></table></figure>\n<h3 id=\"上面处理阶段都是按照先进先出的规则执行回调函数，按顺序执行，直到队列为空或是该阶段执行的回调函数达到该阶段所允许一次执行回调函数的最大限制后，才会将操作权移交给下一阶段。\"><a href=\"#上面处理阶段都是按照先进先出的规则执行回调函数，按顺序执行，直到队列为空或是该阶段执行的回调函数达到该阶段所允许一次执行回调函数的最大限制后，才会将操作权移交给下一阶段。\" class=\"headerlink\" title=\"上面处理阶段都是按照先进先出的规则执行回调函数，按顺序执行，直到队列为空或是该阶段执行的回调函数达到该阶段所允许一次执行回调函数的最大限制后，才会将操作权移交给下一阶段。\"></a>上面处理阶段都是按照先进先出的规则执行回调函数，按顺序执行，直到队列为空或是该阶段执行的回调函数达到该阶段所允许一次执行回调函数的最大限制后，才会将操作权移交给下一阶段。</h3><ul>\n<li>timers: 用来检查setTimeout()和setInterval()定时器是否到期，如果到期则执行它，否则下一阶段</li>\n<li>I/O callbacks: 用来处理timers阶段、setImmediate、和TCP他们的异常回调函数或者error</li>\n<li>idle, prepare: nodejs内部函数调用，在循环被I/O阻塞之前prepare回调就会立即调用</li>\n<li>poll: 用来监听fd的事件的，比如socket的可读，可写，文件的可读可等等</li>\n<li>check: setImmediate()函数只会在这个阶段执行</li>\n<li>close callbacks: 执行一些诸如关闭事件的回调函数，如socket.on(‘close’, …)</li>\n</ul>\n<h2 id=\"具体分析，看下图：\"><a href=\"#具体分析，看下图：\" class=\"headerlink\" title=\"具体分析，看下图：\"></a>具体分析，看下图：</h2><h3 id=\"1-当setTimeout时间最小，读取文件不存在的时候\"><a href=\"#1-当setTimeout时间最小，读取文件不存在的时候\" class=\"headerlink\" title=\"1.当setTimeout时间最小，读取文件不存在的时候\"></a>1.当setTimeout时间最小，读取文件不存在的时候</h3><p><img src=\"/eventloop/eventloop-setTimeout0-unfile.png\" alt=\"\"></p>\n<h3 id=\"如图所示，分别是nextTick、readFile、setTimeout、setImmediate，然而现在并没有1-txt和2-txt文件，输出结果是next-Tick、setTimeout、readFile、setImmediate，在event-loop中先判断的是timeers，最先出书next-Tick因为process-nextTick的实现是基于v8-MicroTask-是在当前js-call-stack-中没有可执行代码才会执行的队列-低于js-call-stack-代码，但高于事件循环，不属于Event-Loop，上面javascript的Event-Loop介绍过了，所以最先输出。然后开始走Event-Loop，第一阶段是timers，判断setTimeout到期，所以输出setTimeout，进入下一阶段，poll将I-O操作权交出，新线程操作，但是并没有相关读取文件，所以直接返回回调函数，所以处处readFile，最后到check阶段，输出setImmediate\"><a href=\"#如图所示，分别是nextTick、readFile、setTimeout、setImmediate，然而现在并没有1-txt和2-txt文件，输出结果是next-Tick、setTimeout、readFile、setImmediate，在event-loop中先判断的是timeers，最先出书next-Tick因为process-nextTick的实现是基于v8-MicroTask-是在当前js-call-stack-中没有可执行代码才会执行的队列-低于js-call-stack-代码，但高于事件循环，不属于Event-Loop，上面javascript的Event-Loop介绍过了，所以最先输出。然后开始走Event-Loop，第一阶段是timers，判断setTimeout到期，所以输出setTimeout，进入下一阶段，poll将I-O操作权交出，新线程操作，但是并没有相关读取文件，所以直接返回回调函数，所以处处readFile，最后到check阶段，输出setImmediate\" class=\"headerlink\" title=\"如图所示，分别是nextTick、readFile、setTimeout、setImmediate，然而现在并没有1.txt和2.txt文件，输出结果是next Tick、setTimeout、readFile、setImmediate，在event loop中先判断的是timeers，最先出书next Tick因为process.nextTick的实现是基于v8 MicroTask(是在当前js call stack 中没有可执行代码才会执行的队列,低于js call stack 代码，但高于事件循环，不属于Event Loop，上面javascript的Event Loop介绍过了，所以最先输出。然后开始走Event Loop，第一阶段是timers，判断setTimeout到期，所以输出setTimeout，进入下一阶段，poll将I/O操作权交出，新线程操作，但是并没有相关读取文件，所以直接返回回调函数，所以处处readFile，最后到check阶段，输出setImmediate\"></a>如图所示，分别是nextTick、readFile、setTimeout、setImmediate，然而现在并没有1.txt和2.txt文件，输出结果是next Tick、setTimeout、readFile、setImmediate，在event loop中先判断的是timeers，最先出书next Tick因为process.nextTick的实现是基于v8 MicroTask(是在当前js call stack 中没有可执行代码才会执行的队列,低于js call stack 代码，但高于事件循环，不属于Event Loop，上面javascript的Event Loop介绍过了，所以最先输出。然后开始走Event Loop，第一阶段是timers，判断setTimeout到期，所以输出setTimeout，进入下一阶段，poll将I/O操作权交出，新线程操作，但是并没有相关读取文件，所以直接返回回调函数，所以处处readFile，最后到check阶段，输出setImmediate</h3><h3 id=\"2-当setTimeout时间最小，读取文件存在的时候\"><a href=\"#2-当setTimeout时间最小，读取文件存在的时候\" class=\"headerlink\" title=\"2.当setTimeout时间最小，读取文件存在的时候\"></a>2.当setTimeout时间最小，读取文件存在的时候</h3><p><img src=\"/eventloop/eventloop-setTimeout0-file.png\" alt=\"\"></p>\n<h3 id=\"如图所示，分别是nextTick、setTimeout、setImmediate、readFile，这次readFile在最后面，是因为文件存在，执行到poll阶段的时候，执行I-O操作，node线程开始执行check阶段，当交出的I-O操作结束后，返回给Event-Loop所以再执行readFile的回调函数，所以他在最后面\"><a href=\"#如图所示，分别是nextTick、setTimeout、setImmediate、readFile，这次readFile在最后面，是因为文件存在，执行到poll阶段的时候，执行I-O操作，node线程开始执行check阶段，当交出的I-O操作结束后，返回给Event-Loop所以再执行readFile的回调函数，所以他在最后面\" class=\"headerlink\" title=\"如图所示，分别是nextTick、setTimeout、setImmediate、readFile，这次readFile在最后面，是因为文件存在，执行到poll阶段的时候，执行I/O操作，node线程开始执行check阶段，当交出的I/O操作结束后，返回给Event Loop所以再执行readFile的回调函数，所以他在最后面\"></a>如图所示，分别是nextTick、setTimeout、setImmediate、readFile，这次readFile在最后面，是因为文件存在，执行到poll阶段的时候，执行I/O操作，node线程开始执行check阶段，当交出的I/O操作结束后，返回给Event Loop所以再执行readFile的回调函数，所以他在最后面</h3><h3 id=\"3-当setTimeout时间为100毫秒，读取文件不存在的时候\"><a href=\"#3-当setTimeout时间为100毫秒，读取文件不存在的时候\" class=\"headerlink\" title=\"3.当setTimeout时间为100毫秒，读取文件不存在的时候\"></a>3.当setTimeout时间为100毫秒，读取文件不存在的时候</h3><p><img src=\"/eventloop/eventloop-setTimeout100-unfile.png\" alt=\"\"></p>\n<h3 id=\"如图所示，分别是nextTick、readFile、setImmediate、setTimeout，它和1不同的地方是setTimeout排在最后了，这是因为在执行timers的时候，setTimeout没有到期，所以直接执行下一阶段，当执行完poll的时候，会去执行查看定时器有没有到期，如果没有下一次Event-Loop再次查看，知道定时器到期，所以他在最后面\"><a href=\"#如图所示，分别是nextTick、readFile、setImmediate、setTimeout，它和1不同的地方是setTimeout排在最后了，这是因为在执行timers的时候，setTimeout没有到期，所以直接执行下一阶段，当执行完poll的时候，会去执行查看定时器有没有到期，如果没有下一次Event-Loop再次查看，知道定时器到期，所以他在最后面\" class=\"headerlink\" title=\"如图所示，分别是nextTick、readFile、setImmediate、setTimeout，它和1不同的地方是setTimeout排在最后了，这是因为在执行timers的时候，setTimeout没有到期，所以直接执行下一阶段，当执行完poll的时候，会去执行查看定时器有没有到期，如果没有下一次Event Loop再次查看，知道定时器到期，所以他在最后面\"></a>如图所示，分别是nextTick、readFile、setImmediate、setTimeout，它和1不同的地方是setTimeout排在最后了，这是因为在执行timers的时候，setTimeout没有到期，所以直接执行下一阶段，当执行完poll的时候，会去执行查看定时器有没有到期，如果没有下一次Event Loop再次查看，知道定时器到期，所以他在最后面</h3><h3 id=\"4-当setTimeout时间为100毫秒，读取文件存在的时候\"><a href=\"#4-当setTimeout时间为100毫秒，读取文件存在的时候\" class=\"headerlink\" title=\"4.当setTimeout时间为100毫秒，读取文件存在的时候\"></a>4.当setTimeout时间为100毫秒，读取文件存在的时候</h3><p><img src=\"/eventloop/eventloop-setTimeout100-file.png\" alt=\"\"></p>\n<h3 id=\"如图所示，分别是nextTick、setImmediate、readFile、setTimeout，它和2的区别是setTimeout在最后，原因和3一样。\"><a href=\"#如图所示，分别是nextTick、setImmediate、readFile、setTimeout，它和2的区别是setTimeout在最后，原因和3一样。\" class=\"headerlink\" title=\"如图所示，分别是nextTick、setImmediate、readFile、setTimeout，它和2的区别是setTimeout在最后，原因和3一样。\"></a>如图所示，分别是nextTick、setImmediate、readFile、setTimeout，它和2的区别是setTimeout在最后，原因和3一样。</h3><h2 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h2><h3 id=\"1-javascript和node-js都是单线程，但是node底层是多线程操作\"><a href=\"#1-javascript和node-js都是单线程，但是node底层是多线程操作\" class=\"headerlink\" title=\"1.javascript和node.js都是单线程，但是node底层是多线程操作\"></a>1.javascript和node.js都是单线程，但是node底层是多线程操作</h3><h3 id=\"2-Event-Loop-——-任务队列\"><a href=\"#2-Event-Loop-——-任务队列\" class=\"headerlink\" title=\"2.Event Loop —— 任务队列\"></a>2.Event Loop —— 任务队列</h3><h3 id=\"3-当同时设置nextTick-setImmediate-setTimeout时一定是nextTick先执行，nextTick不属于Event-LOop，它属于v8的micro-tasks，并且会阻塞Event-Loop\"><a href=\"#3-当同时设置nextTick-setImmediate-setTimeout时一定是nextTick先执行，nextTick不属于Event-LOop，它属于v8的micro-tasks，并且会阻塞Event-Loop\" class=\"headerlink\" title=\"3.当同时设置nextTick, setImmediate, setTimeout时一定是nextTick先执行，nextTick不属于Event LOop，它属于v8的micro tasks，并且会阻塞Event Loop\"></a>3.当同时设置nextTick, setImmediate, setTimeout时一定是nextTick先执行，nextTick不属于Event LOop，它属于v8的micro tasks，并且会阻塞Event Loop</h3><h3 id=\"4-setImmediate，setTimeout属于Event-Loop但是，直接阶段不同\"><a href=\"#4-setImmediate，setTimeout属于Event-Loop但是，直接阶段不同\" class=\"headerlink\" title=\"4.setImmediate，setTimeout属于Event Loop但是，直接阶段不同\"></a>4.setImmediate，setTimeout属于Event Loop但是，直接阶段不同</h3>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"javascript的运行机制，Event-Loop\"><a href=\"#javascript的运行机制，Event-Loop\" class=\"headerlink\" title=\"javascript的运行机制，Event Loop\"></a>javascript的运行机制，Event Loop</h4><h2 id=\"单线程\"><a href=\"#单线程\" class=\"headerlink\" title=\"单线程\"></a>单线程</h2><h3 id=\"javascript为什么是单线程语言，原因在于如果是多线程，当一个线程对DOM节点做添加内容操作的时候，另一个线程要删除这个DOM节点，这个时候，浏览器应该怎么选择，这就造成了混乱，为了解决这类问题，在一开始的时候，javascript就采用单线程模式。\"><a href=\"#javascript为什么是单线程语言，原因在于如果是多线程，当一个线程对DOM节点做添加内容操作的时候，另一个线程要删除这个DOM节点，这个时候，浏览器应该怎么选择，这就造成了混乱，为了解决这类问题，在一开始的时候，javascript就采用单线程模式。\" class=\"headerlink\" title=\"javascript为什么是单线程语言，原因在于如果是多线程，当一个线程对DOM节点做添加内容操作的时候，另一个线程要删除这个DOM节点，这个时候，浏览器应该怎么选择，这就造成了混乱，为了解决这类问题，在一开始的时候，javascript就采用单线程模式。\"></a>javascript为什么是单线程语言，原因在于如果是多线程，当一个线程对DOM节点做添加内容操作的时候，另一个线程要删除这个DOM节点，这个时候，浏览器应该怎么选择，这就造成了混乱，为了解决这类问题，在一开始的时候，javascript就采用单线程模式。</h3><h2 id=\"在后面H5出的web-worker标准的时候，看似是多线程，其实是在一个主线程来控制其他线程，而且不能操作DOM，所以本质还是单线程\"><a href=\"#在后面H5出的web-worker标准的时候，看似是多线程，其实是在一个主线程来控制其他线程，而且不能操作DOM，所以本质还是单线程\" class=\"headerlink\" title=\"在后面H5出的web worker标准的时候，看似是多线程，其实是在一个主线程来控制其他线程，而且不能操作DOM，所以本质还是单线程\"></a>在后面H5出的web worker标准的时候，看似是多线程，其实是在一个主线程来控制其他线程，而且不能操作DOM，所以本质还是单线程</h2><h2 id=\"任务队列\"><a href=\"#任务队列\" class=\"headerlink\" title=\"任务队列\"></a>任务队列</h2><h3 id=\"任务可以分为两种，一种为同步，另一种为异步（具有回调函数）。如下图：\"><a href=\"#任务可以分为两种，一种为同步，另一种为异步（具有回调函数）。如下图：\" class=\"headerlink\" title=\"任务可以分为两种，一种为同步，另一种为异步（具有回调函数）。如下图：\"></a>任务可以分为两种，一种为同步，另一种为异步（具有回调函数）。如下图：</h3><p><img src=\"/2018/01/16/javascript/eventLoop/eventloop.png\" alt=\"\"></p>\n<h3 id=\"所有的同步任务都在主线程上执行，形成一个执行栈-stack。当所有同步任务执行完毕后，它会去执行microtask-queue中的异步任务（nextTick，Promise），将他们全部执行。主线程之外还有一个任务队列task-queue，当有异步任务（DOM，AJAX，setTimeout，setImmediate）有结果的时候，就在任务队列里放一个事件，一旦执行栈和microtask-queue任务执行完毕，系统就会读取任务队列，将取出排在最前面的事件加入执行栈执行，这种机制就是任务队列。\"><a href=\"#所有的同步任务都在主线程上执行，形成一个执行栈-stack。当所有同步任务执行完毕后，它会去执行microtask-queue中的异步任务（nextTick，Promise），将他们全部执行。主线程之外还有一个任务队列task-queue，当有异步任务（DOM，AJAX，setTimeout，setImmediate）有结果的时候，就在任务队列里放一个事件，一旦执行栈和microtask-queue任务执行完毕，系统就会读取任务队列，将取出排在最前面的事件加入执行栈执行，这种机制就是任务队列。\" class=\"headerlink\" title=\"所有的同步任务都在主线程上执行，形成一个执行栈 stack。当所有同步任务执行完毕后，它会去执行microtask queue中的异步任务（nextTick，Promise），将他们全部执行。主线程之外还有一个任务队列task queue，当有异步任务（DOM，AJAX，setTimeout，setImmediate）有结果的时候，就在任务队列里放一个事件，一旦执行栈和microtask queue任务执行完毕，系统就会读取任务队列，将取出排在最前面的事件加入执行栈执行，这种机制就是任务队列。\"></a>所有的同步任务都在主线程上执行，形成一个执行栈 stack。当所有同步任务执行完毕后，它会去执行microtask queue中的异步任务（nextTick，Promise），将他们全部执行。主线程之外还有一个任务队列task queue，当有异步任务（DOM，AJAX，setTimeout，setImmediate）有结果的时候，就在任务队列里放一个事件，一旦执行栈和microtask queue任务执行完毕，系统就会读取任务队列，将取出排在最前面的事件加入执行栈执行，这种机制就是任务队列。</h3><h2 id=\"Event-Loop\"><a href=\"#Event-Loop\" class=\"headerlink\" title=\"Event Loop\"></a>Event Loop</h2><h3 id=\"主线程在任务队列中读取事件，这个过程是循环不断地，所以这种运行机制叫做Event-Loop（事件循环）\"><a href=\"#主线程在任务队列中读取事件，这个过程是循环不断地，所以这种运行机制叫做Event-Loop（事件循环）\" class=\"headerlink\" title=\"主线程在任务队列中读取事件，这个过程是循环不断地，所以这种运行机制叫做Event Loop（事件循环）\"></a>主线程在任务队列中读取事件，这个过程是循环不断地，所以这种运行机制叫做Event Loop（事件循环）</h3><h2 id=\"nextTick、setImmediate、setTimeout\"><a href=\"#nextTick、setImmediate、setTimeout\" class=\"headerlink\" title=\"nextTick、setImmediate、setTimeout\"></a>nextTick、setImmediate、setTimeout</h2><h3 id=\"nextTick是在执行栈同步代码结束之后，下一次Event-Loop（任务队列）执行之前。当所有同步任务执行完，会在queue中执行nextTick，无论nextTick有多少层回调，都会执行完毕后再去任务队列，所以会造成一直停留在当前执行栈，无法执行任务队列，请看下面代码\"><a href=\"#nextTick是在执行栈同步代码结束之后，下一次Event-Loop（任务队列）执行之前。当所有同步任务执行完，会在queue中执行nextTick，无论nextTick有多少层回调，都会执行完毕后再去任务队列，所以会造成一直停留在当前执行栈，无法执行任务队列，请看下面代码\" class=\"headerlink\" title=\"nextTick是在执行栈同步代码结束之后，下一次Event Loop（任务队列）执行之前。当所有同步任务执行完，会在queue中执行nextTick，无论nextTick有多少层回调，都会执行完毕后再去任务队列，所以会造成一直停留在当前执行栈，无法执行任务队列，请看下面代码\"></a>nextTick是在执行栈同步代码结束之后，下一次Event Loop（任务队列）执行之前。当所有同步任务执行完，会在queue中执行nextTick，无论nextTick有多少层回调，都会执行完毕后再去任务队列，所以会造成一直停留在当前执行栈，无法执行任务队列，请看下面代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process.nextTick(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'nextTick1'</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;console.log(<span class=\"string\">'nextTick2'</span>)&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">setTimeout(<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">timeout</span></span>() &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'setTimeout'</span>);</span><br><span class=\"line\">&#125;, 0)</span><br></pre></td></tr></table></figure>\n<h3 id=\"执行完毕后输出nextTick1、nextTick2、setTimeout，原因是nextTick是在当前执行栈末尾执行，而setTimeout是在下次任务队列在执行\"><a href=\"#执行完毕后输出nextTick1、nextTick2、setTimeout，原因是nextTick是在当前执行栈末尾执行，而setTimeout是在下次任务队列在执行\" class=\"headerlink\" title=\"执行完毕后输出nextTick1、nextTick2、setTimeout，原因是nextTick是在当前执行栈末尾执行，而setTimeout是在下次任务队列在执行\"></a>执行完毕后输出nextTick1、nextTick2、setTimeout，原因是nextTick是在当前执行栈末尾执行，而setTimeout是在下次任务队列在执行</h3><h3 id=\"setImmediate方法是在Event-Loop（任务队列）末尾，也就是下一次Event-Loop时执行。\"><a href=\"#setImmediate方法是在Event-Loop（任务队列）末尾，也就是下一次Event-Loop时执行。\" class=\"headerlink\" title=\"setImmediate方法是在Event Loop（任务队列）末尾，也就是下一次Event Loop时执行。\"></a>setImmediate方法是在Event Loop（任务队列）末尾，也就是下一次Event Loop时执行。</h3><h3 id=\"setTimeout方法是按照执行时间，放入任务队列，有时快与setImmediate有时慢。请看以下代码\"><a href=\"#setTimeout方法是按照执行时间，放入任务队列，有时快与setImmediate有时慢。请看以下代码\" class=\"headerlink\" title=\"setTimeout方法是按照执行时间，放入任务队列，有时快与setImmediate有时慢。请看以下代码\"></a>setTimeout方法是按照执行时间，放入任务队列，有时快与setImmediate有时慢。请看以下代码</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setImmediate(<span class=\"function\"><span class=\"title\">function</span></span> () &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'setImmediate1'</span>);</span><br><span class=\"line\">    setImmediate(<span class=\"function\"><span class=\"title\">function</span></span> ()&#123;console.log(<span class=\"string\">'setImmediate2'</span>)&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">setTimeout(<span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">timeout</span></span>() &#123;</span><br><span class=\"line\">    console.log(<span class=\"string\">'setTimeout'</span>);</span><br><span class=\"line\">&#125;, 0);</span><br></pre></td></tr></table></figure>\n<h3 id=\"这段代码执行完可能是setImmediate1、setTimeout、setImmediate2，也可能是setTimeout、setImmediate1、setImmediate2，原因是setTimeout和setImmediate1都是在下次Event-Loop中触发，所以先后不确定，但是setImmediate2肯定是最后，因为他是在setImmediate1任务队列之后，也就是下下次Event-Loop执行\"><a href=\"#这段代码执行完可能是setImmediate1、setTimeout、setImmediate2，也可能是setTimeout、setImmediate1、setImmediate2，原因是setTimeout和setImmediate1都是在下次Event-Loop中触发，所以先后不确定，但是setImmediate2肯定是最后，因为他是在setImmediate1任务队列之后，也就是下下次Event-Loop执行\" class=\"headerlink\" title=\"这段代码执行完可能是setImmediate1、setTimeout、setImmediate2，也可能是setTimeout、setImmediate1、setImmediate2，原因是setTimeout和setImmediate1都是在下次Event Loop中触发，所以先后不确定，但是setImmediate2肯定是最后，因为他是在setImmediate1任务队列之后，也就是下下次Event Loop执行\"></a>这段代码执行完可能是setImmediate1、setTimeout、setImmediate2，也可能是setTimeout、setImmediate1、setImmediate2，原因是setTimeout和setImmediate1都是在下次Event Loop中触发，所以先后不确定，但是setImmediate2肯定是最后，因为他是在setImmediate1任务队列之后，也就是下下次Event Loop执行</h3><h2 id=\"Node-js的Event-Loop\"><a href=\"#Node-js的Event-Loop\" class=\"headerlink\" title=\"Node.js的Event Loop\"></a>Node.js的Event Loop</h2><h3 id=\"Node-js也是单线程的Event-Loop但是和浏览器有些区别，如图所示，\"><a href=\"#Node-js也是单线程的Event-Loop但是和浏览器有些区别，如图所示，\" class=\"headerlink\" title=\"Node.js也是单线程的Event Loop但是和浏览器有些区别，如图所示，\"></a>Node.js也是单线程的Event Loop但是和浏览器有些区别，如图所示，</h3><h3 id=\"1-先通过Chrom-V8引擎解析Javascript脚本\"><a href=\"#1-先通过Chrom-V8引擎解析Javascript脚本\" class=\"headerlink\" title=\"1.先通过Chrom V8引擎解析Javascript脚本\"></a>1.先通过Chrom V8引擎解析Javascript脚本</h3><h3 id=\"2-解析完毕后调用Node-API\"><a href=\"#2-解析完毕后调用Node-API\" class=\"headerlink\" title=\"2.解析完毕后调用Node API\"></a>2.解析完毕后调用Node API</h3><h3 id=\"3-LIBUV库负责Node-API的执行，将不同任务分配给不同的线程，形成一个Event-Loop（任务队列）\"><a href=\"#3-LIBUV库负责Node-API的执行，将不同任务分配给不同的线程，形成一个Event-Loop（任务队列）\" class=\"headerlink\" title=\"3.LIBUV库负责Node API的执行，将不同任务分配给不同的线程，形成一个Event Loop（任务队列）\"></a>3.LIBUV库负责Node API的执行，将不同任务分配给不同的线程，形成一个Event Loop（任务队列）</h3><h3 id=\"4-最后Chrom-V8引擎将结果返回给用户\"><a href=\"#4-最后Chrom-V8引擎将结果返回给用户\" class=\"headerlink\" title=\"4.最后Chrom V8引擎将结果返回给用户\"></a>4.最后Chrom V8引擎将结果返回给用户</h3><p><img src=\"/eventloop/nodesystem.png\" alt=\"\"></p>\n<h2 id=\"Node-js-Event-Loop原理\"><a href=\"#Node-js-Event-Loop原理\" class=\"headerlink\" title=\"Node.js Event Loop原理\"></a>Node.js Event Loop原理</h2><h3 id=\"node-js的特点是事件驱动，非阻塞单线程。当应用程序需要I-O操作的时候，线程并不会阻塞，而是把I-O操作交给底层库（LIBUV）。此时node线程会去处理其他任务，当底层库处理完I-O操作后，会将主动权交还给Node线程，所以Event-Loop的用处是调度线程，例如：当底层库处理I-O操作后调度Node线程处理后续工作，所以虽然node是单线程，但是底层库处理操作依然是多线程\"><a href=\"#node-js的特点是事件驱动，非阻塞单线程。当应用程序需要I-O操作的时候，线程并不会阻塞，而是把I-O操作交给底层库（LIBUV）。此时node线程会去处理其他任务，当底层库处理完I-O操作后，会将主动权交还给Node线程，所以Event-Loop的用处是调度线程，例如：当底层库处理I-O操作后调度Node线程处理后续工作，所以虽然node是单线程，但是底层库处理操作依然是多线程\" class=\"headerlink\" title=\"node.js的特点是事件驱动，非阻塞单线程。当应用程序需要I/O操作的时候，线程并不会阻塞，而是把I/O操作交给底层库（LIBUV）。此时node线程会去处理其他任务，当底层库处理完I/O操作后，会将主动权交还给Node线程，所以Event Loop的用处是调度线程，例如：当底层库处理I/O操作后调度Node线程处理后续工作，所以虽然node是单线程，但是底层库处理操作依然是多线程\"></a>node.js的特点是事件驱动，非阻塞单线程。当应用程序需要I/O操作的时候，线程并不会阻塞，而是把I/O操作交给底层库（LIBUV）。此时node线程会去处理其他任务，当底层库处理完I/O操作后，会将主动权交还给Node线程，所以Event Loop的用处是调度线程，例如：当底层库处理I/O操作后调度Node线程处理后续工作，所以虽然node是单线程，但是底层库处理操作依然是多线程</h3><h2 id=\"Node-Event-Loop的事件处理机制\"><a href=\"#Node-Event-Loop的事件处理机制\" class=\"headerlink\" title=\"Node Event Loop的事件处理机制\"></a>Node Event Loop的事件处理机制</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   ┌───────────────────────┐</span><br><span class=\"line\"></span><br><span class=\"line\">┌─&gt;│        timers         │</span><br><span class=\"line\"></span><br><span class=\"line\">│  └──────────┬────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">│  ┌──────────┴────────────┐</span><br><span class=\"line\"></span><br><span class=\"line\">│  │     I/O callbacks     │</span><br><span class=\"line\"></span><br><span class=\"line\">│  └──────────┬────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">│  ┌──────────┴────────────┐</span><br><span class=\"line\"></span><br><span class=\"line\">│  │     idle, prepare     │</span><br><span class=\"line\"></span><br><span class=\"line\">│  └──────────┬────────────┘      ┌───────────────┐</span><br><span class=\"line\"></span><br><span class=\"line\">│  ┌──────────┴────────────┐      │   incoming:   │</span><br><span class=\"line\"></span><br><span class=\"line\">│  │         poll          │&lt;─────┤  connections, │</span><br><span class=\"line\"></span><br><span class=\"line\">│  └──────────┬────────────┘      │   data, etc.  │</span><br><span class=\"line\"></span><br><span class=\"line\">│  ┌──────────┴────────────┐      └───────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">│  │        check          │</span><br><span class=\"line\"></span><br><span class=\"line\">│  └──────────┬────────────┘</span><br><span class=\"line\"></span><br><span class=\"line\">│  ┌──────────┴────────────┐</span><br><span class=\"line\"></span><br><span class=\"line\">└──┤    close callbacks    │</span><br><span class=\"line\"></span><br><span class=\"line\">   └───────────────────────┘</span><br></pre></td></tr></table></figure>\n<h3 id=\"上面处理阶段都是按照先进先出的规则执行回调函数，按顺序执行，直到队列为空或是该阶段执行的回调函数达到该阶段所允许一次执行回调函数的最大限制后，才会将操作权移交给下一阶段。\"><a href=\"#上面处理阶段都是按照先进先出的规则执行回调函数，按顺序执行，直到队列为空或是该阶段执行的回调函数达到该阶段所允许一次执行回调函数的最大限制后，才会将操作权移交给下一阶段。\" class=\"headerlink\" title=\"上面处理阶段都是按照先进先出的规则执行回调函数，按顺序执行，直到队列为空或是该阶段执行的回调函数达到该阶段所允许一次执行回调函数的最大限制后，才会将操作权移交给下一阶段。\"></a>上面处理阶段都是按照先进先出的规则执行回调函数，按顺序执行，直到队列为空或是该阶段执行的回调函数达到该阶段所允许一次执行回调函数的最大限制后，才会将操作权移交给下一阶段。</h3><ul>\n<li>timers: 用来检查setTimeout()和setInterval()定时器是否到期，如果到期则执行它，否则下一阶段</li>\n<li>I/O callbacks: 用来处理timers阶段、setImmediate、和TCP他们的异常回调函数或者error</li>\n<li>idle, prepare: nodejs内部函数调用，在循环被I/O阻塞之前prepare回调就会立即调用</li>\n<li>poll: 用来监听fd的事件的，比如socket的可读，可写，文件的可读可等等</li>\n<li>check: setImmediate()函数只会在这个阶段执行</li>\n<li>close callbacks: 执行一些诸如关闭事件的回调函数，如socket.on(‘close’, …)</li>\n</ul>\n<h2 id=\"具体分析，看下图：\"><a href=\"#具体分析，看下图：\" class=\"headerlink\" title=\"具体分析，看下图：\"></a>具体分析，看下图：</h2><h3 id=\"1-当setTimeout时间最小，读取文件不存在的时候\"><a href=\"#1-当setTimeout时间最小，读取文件不存在的时候\" class=\"headerlink\" title=\"1.当setTimeout时间最小，读取文件不存在的时候\"></a>1.当setTimeout时间最小，读取文件不存在的时候</h3><p><img src=\"/eventloop/eventloop-setTimeout0-unfile.png\" alt=\"\"></p>\n<h3 id=\"如图所示，分别是nextTick、readFile、setTimeout、setImmediate，然而现在并没有1-txt和2-txt文件，输出结果是next-Tick、setTimeout、readFile、setImmediate，在event-loop中先判断的是timeers，最先出书next-Tick因为process-nextTick的实现是基于v8-MicroTask-是在当前js-call-stack-中没有可执行代码才会执行的队列-低于js-call-stack-代码，但高于事件循环，不属于Event-Loop，上面javascript的Event-Loop介绍过了，所以最先输出。然后开始走Event-Loop，第一阶段是timers，判断setTimeout到期，所以输出setTimeout，进入下一阶段，poll将I-O操作权交出，新线程操作，但是并没有相关读取文件，所以直接返回回调函数，所以处处readFile，最后到check阶段，输出setImmediate\"><a href=\"#如图所示，分别是nextTick、readFile、setTimeout、setImmediate，然而现在并没有1-txt和2-txt文件，输出结果是next-Tick、setTimeout、readFile、setImmediate，在event-loop中先判断的是timeers，最先出书next-Tick因为process-nextTick的实现是基于v8-MicroTask-是在当前js-call-stack-中没有可执行代码才会执行的队列-低于js-call-stack-代码，但高于事件循环，不属于Event-Loop，上面javascript的Event-Loop介绍过了，所以最先输出。然后开始走Event-Loop，第一阶段是timers，判断setTimeout到期，所以输出setTimeout，进入下一阶段，poll将I-O操作权交出，新线程操作，但是并没有相关读取文件，所以直接返回回调函数，所以处处readFile，最后到check阶段，输出setImmediate\" class=\"headerlink\" title=\"如图所示，分别是nextTick、readFile、setTimeout、setImmediate，然而现在并没有1.txt和2.txt文件，输出结果是next Tick、setTimeout、readFile、setImmediate，在event loop中先判断的是timeers，最先出书next Tick因为process.nextTick的实现是基于v8 MicroTask(是在当前js call stack 中没有可执行代码才会执行的队列,低于js call stack 代码，但高于事件循环，不属于Event Loop，上面javascript的Event Loop介绍过了，所以最先输出。然后开始走Event Loop，第一阶段是timers，判断setTimeout到期，所以输出setTimeout，进入下一阶段，poll将I/O操作权交出，新线程操作，但是并没有相关读取文件，所以直接返回回调函数，所以处处readFile，最后到check阶段，输出setImmediate\"></a>如图所示，分别是nextTick、readFile、setTimeout、setImmediate，然而现在并没有1.txt和2.txt文件，输出结果是next Tick、setTimeout、readFile、setImmediate，在event loop中先判断的是timeers，最先出书next Tick因为process.nextTick的实现是基于v8 MicroTask(是在当前js call stack 中没有可执行代码才会执行的队列,低于js call stack 代码，但高于事件循环，不属于Event Loop，上面javascript的Event Loop介绍过了，所以最先输出。然后开始走Event Loop，第一阶段是timers，判断setTimeout到期，所以输出setTimeout，进入下一阶段，poll将I/O操作权交出，新线程操作，但是并没有相关读取文件，所以直接返回回调函数，所以处处readFile，最后到check阶段，输出setImmediate</h3><h3 id=\"2-当setTimeout时间最小，读取文件存在的时候\"><a href=\"#2-当setTimeout时间最小，读取文件存在的时候\" class=\"headerlink\" title=\"2.当setTimeout时间最小，读取文件存在的时候\"></a>2.当setTimeout时间最小，读取文件存在的时候</h3><p><img src=\"/eventloop/eventloop-setTimeout0-file.png\" alt=\"\"></p>\n<h3 id=\"如图所示，分别是nextTick、setTimeout、setImmediate、readFile，这次readFile在最后面，是因为文件存在，执行到poll阶段的时候，执行I-O操作，node线程开始执行check阶段，当交出的I-O操作结束后，返回给Event-Loop所以再执行readFile的回调函数，所以他在最后面\"><a href=\"#如图所示，分别是nextTick、setTimeout、setImmediate、readFile，这次readFile在最后面，是因为文件存在，执行到poll阶段的时候，执行I-O操作，node线程开始执行check阶段，当交出的I-O操作结束后，返回给Event-Loop所以再执行readFile的回调函数，所以他在最后面\" class=\"headerlink\" title=\"如图所示，分别是nextTick、setTimeout、setImmediate、readFile，这次readFile在最后面，是因为文件存在，执行到poll阶段的时候，执行I/O操作，node线程开始执行check阶段，当交出的I/O操作结束后，返回给Event Loop所以再执行readFile的回调函数，所以他在最后面\"></a>如图所示，分别是nextTick、setTimeout、setImmediate、readFile，这次readFile在最后面，是因为文件存在，执行到poll阶段的时候，执行I/O操作，node线程开始执行check阶段，当交出的I/O操作结束后，返回给Event Loop所以再执行readFile的回调函数，所以他在最后面</h3><h3 id=\"3-当setTimeout时间为100毫秒，读取文件不存在的时候\"><a href=\"#3-当setTimeout时间为100毫秒，读取文件不存在的时候\" class=\"headerlink\" title=\"3.当setTimeout时间为100毫秒，读取文件不存在的时候\"></a>3.当setTimeout时间为100毫秒，读取文件不存在的时候</h3><p><img src=\"/eventloop/eventloop-setTimeout100-unfile.png\" alt=\"\"></p>\n<h3 id=\"如图所示，分别是nextTick、readFile、setImmediate、setTimeout，它和1不同的地方是setTimeout排在最后了，这是因为在执行timers的时候，setTimeout没有到期，所以直接执行下一阶段，当执行完poll的时候，会去执行查看定时器有没有到期，如果没有下一次Event-Loop再次查看，知道定时器到期，所以他在最后面\"><a href=\"#如图所示，分别是nextTick、readFile、setImmediate、setTimeout，它和1不同的地方是setTimeout排在最后了，这是因为在执行timers的时候，setTimeout没有到期，所以直接执行下一阶段，当执行完poll的时候，会去执行查看定时器有没有到期，如果没有下一次Event-Loop再次查看，知道定时器到期，所以他在最后面\" class=\"headerlink\" title=\"如图所示，分别是nextTick、readFile、setImmediate、setTimeout，它和1不同的地方是setTimeout排在最后了，这是因为在执行timers的时候，setTimeout没有到期，所以直接执行下一阶段，当执行完poll的时候，会去执行查看定时器有没有到期，如果没有下一次Event Loop再次查看，知道定时器到期，所以他在最后面\"></a>如图所示，分别是nextTick、readFile、setImmediate、setTimeout，它和1不同的地方是setTimeout排在最后了，这是因为在执行timers的时候，setTimeout没有到期，所以直接执行下一阶段，当执行完poll的时候，会去执行查看定时器有没有到期，如果没有下一次Event Loop再次查看，知道定时器到期，所以他在最后面</h3><h3 id=\"4-当setTimeout时间为100毫秒，读取文件存在的时候\"><a href=\"#4-当setTimeout时间为100毫秒，读取文件存在的时候\" class=\"headerlink\" title=\"4.当setTimeout时间为100毫秒，读取文件存在的时候\"></a>4.当setTimeout时间为100毫秒，读取文件存在的时候</h3><p><img src=\"/eventloop/eventloop-setTimeout100-file.png\" alt=\"\"></p>\n<h3 id=\"如图所示，分别是nextTick、setImmediate、readFile、setTimeout，它和2的区别是setTimeout在最后，原因和3一样。\"><a href=\"#如图所示，分别是nextTick、setImmediate、readFile、setTimeout，它和2的区别是setTimeout在最后，原因和3一样。\" class=\"headerlink\" title=\"如图所示，分别是nextTick、setImmediate、readFile、setTimeout，它和2的区别是setTimeout在最后，原因和3一样。\"></a>如图所示，分别是nextTick、setImmediate、readFile、setTimeout，它和2的区别是setTimeout在最后，原因和3一样。</h3><h2 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h2><h3 id=\"1-javascript和node-js都是单线程，但是node底层是多线程操作\"><a href=\"#1-javascript和node-js都是单线程，但是node底层是多线程操作\" class=\"headerlink\" title=\"1.javascript和node.js都是单线程，但是node底层是多线程操作\"></a>1.javascript和node.js都是单线程，但是node底层是多线程操作</h3><h3 id=\"2-Event-Loop-——-任务队列\"><a href=\"#2-Event-Loop-——-任务队列\" class=\"headerlink\" title=\"2.Event Loop —— 任务队列\"></a>2.Event Loop —— 任务队列</h3><h3 id=\"3-当同时设置nextTick-setImmediate-setTimeout时一定是nextTick先执行，nextTick不属于Event-LOop，它属于v8的micro-tasks，并且会阻塞Event-Loop\"><a href=\"#3-当同时设置nextTick-setImmediate-setTimeout时一定是nextTick先执行，nextTick不属于Event-LOop，它属于v8的micro-tasks，并且会阻塞Event-Loop\" class=\"headerlink\" title=\"3.当同时设置nextTick, setImmediate, setTimeout时一定是nextTick先执行，nextTick不属于Event LOop，它属于v8的micro tasks，并且会阻塞Event Loop\"></a>3.当同时设置nextTick, setImmediate, setTimeout时一定是nextTick先执行，nextTick不属于Event LOop，它属于v8的micro tasks，并且会阻塞Event Loop</h3><h3 id=\"4-setImmediate，setTimeout属于Event-Loop但是，直接阶段不同\"><a href=\"#4-setImmediate，setTimeout属于Event-Loop但是，直接阶段不同\" class=\"headerlink\" title=\"4.setImmediate，setTimeout属于Event Loop但是，直接阶段不同\"></a>4.setImmediate，setTimeout属于Event Loop但是，直接阶段不同</h3>"},{"title":"promise 原理解析","date":"2018-01-10T16:00:00.000Z","_content":"\n###### promise用法，根据promise/A+协议，分析promise原理，具体协议请查阅 \n###### https://segmentfault.com/a/1190000002452115\n\n## 创建一个文件index.js并且创建一个promise实例,创建随机数num 当大于0.5时resolve，当小于0.5时reject，用then方法接收resolve返回值为value，reject返回值为reason\n``` bash\nindex.js\nlet promiseA = new Promise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功')\n        }else{\n            reject('小于失败')\n        }\n    },2000)\n})\npromiseA.then((value)=>{\n    console.log(value)\n},(reason)=>{\n    console.log(reason)\n})\n```\n## 这是原生promise实例，现在开始创建我们自己的promise\n### 1.首先创建一个新的文件myPromise.js，将其导出，以便引用。其中task为new Promise(callback)的callback函数\n``` bash\nmyPromise.js\nfunction myPromise(task){\n\n}\nmodule.exports = myPromise\n```\n### 2.在index.js文件中引入我们创建的myPromise，并且生成新实例new MyPromise()\n``` bash\nindex.js\nconst MyPromise = require('./myPromise')\n\nlet promiseA = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功')\n        }else{\n            reject('小于失败')\n        }\n    },2000)\n})\n\npromiseA.then((value)=>{\n    console.log(value)\n},(reason)=>{\n    console.log(reason)\n})\n```\n## 在myPromise.js文件中添加如下代码，在这里用self接受this对象，然后给myPromise构造函数添加属性，state代表状态pending fulfilled和rejected的变化，value和reason分别用来保存myPromise实例resolve和reject传入的值而不是自身构造函数的形参，resolve和reject函数来接收new myPromise的resolve和reject的参数\n``` bash\nmyPromise.js\nlet self = this\nself.state = 'pending'\nself.value = undefined\nself.reason = undefined\n\nfunction resolve(value){\n\n}\nfunction reject(reason){\n\n}\ntry{\n    task(resolve,reject)\n}catch(error){\n    reject(error)\n}\n```\n## myPromise构造函数添加onResolvedCallbacks和onRejectedCallbacks,用于临时保存then中函数，当实例resolve和reject的时候以便调用。在resolve函数中，先判断value是否是Promise的实例，如果是，说明resolve返回的是一个promise对象，所以递归value。当resolve或者reject调用的时候分别改变state状态为fulfilled和rejected。当调用then时，如果当前状态为fulfilled成功，则直接返回then的onFulfilled函数向外返回vaule，如果是rejectd状态，则调用onRejected函数，向外返回reason，如果正处于pending等候状态，则分别向onResolvedCallbacks，onRejectedCallbacks添加onFulFilled和onRejected以便resolve和reject调用\n``` bash\nmyPromise.js\nfunction myPromise(task){\n    let self = this\n    self.state = 'pending'\n    self.value = undefined\n    self.reason = undefined\n\n    self.onResolvedCallbacks = []\n    self.onRejectedCallbacks = []\n    function resolve(value){\n        if(value instanceof Promise){\n            return value.task(resolve,reject)\n        }\n        setTimeout(()=>{\n            self.state = 'fulfilled'\n            self.value = value\n            self.onResolvedCallbacks.forEach(item=>item(self.value))    \n        })\n    }\n    function reject(reason){\n        setTimeout(()=>{\n            self.state = 'rejected'\n            self.reason = reason\n            self.onRejectedCallbacks.forEach(item=>item(self.reason))\n        })\n    }\n    try{\n        task(resolve,reject)\n    }catch(error){\n        reject(error)\n    }\n}\nmyPromise.prototype.then = function(onFulFilled,onRejected){\n    let self = this\n    if(self.state == 'fulfilled'){\n        onFulFilled(self.value)\n    }else if(self.state == 'rejected'){\n        onRejected(self.reason)\n    }else if(self.state == 'pending'){\n        self.onResolvedCallbacks.push(onFulFilled)\n        self.onRejectedCallbacks.push(onRejected)\n    }\n}\n```\n\n## 现在改动一下index.js文件如下，在Promise的then方法上实现链式调用，也就是说第一个then返回的是一个promise对象，然后在调用then\n``` bash\nindex.js\nconst MyPromise = require('./myPromise')\n\nlet promiseA = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功')\n        }else{\n            reject('小于失败')\n        }\n    },2000)\n})\n\npromiseA.then((value)=>{\n    console.log(`我是value： ${value}`)\n    return new MyPromise((resolve,reject)=>{\n        resolve(value)\n    })\n},(reason)=>{\n    console.log(reason)\n}).then((data)=>{\n    console.log(`我是data： ${data}`)\n})\n```\n\n## 来让我们看一下myPromise.js这个文件,myPromise构造函数不做改动，先说一下then方法的改变，根据promise/A+协议，then必须返回一个promise对象，所以创建promise2，让then最终返回的是一个promise对象，在promise2中构建myPromise实例用法就是将task函数展现出来，根据协议说Promise解析过程 是以一个promise和一个值做为参数的抽象过程，可表示为[[Resolve]](promise, x)，所以重新封装一个函数resolvePromise接收promise2，x(协议：onFulfilled 或 onRejected 返回了值x, 则执行Promise 解析流程[[Resolve]](promise2, x)），resolve,reject封装函数调用,在其中先判断onFulFilled和onRejected是否是函数如果不是则直接返回接收值\n``` bash\nmyPromise.js\nfunction resolvePromise(promise2,x,resolve,reject){\n\n}\n\nmyPromise.prototype.then = function(onFulFilled,onRejected){\n    onFulFilled = typeof onFulFilled === 'function'?onFulFilled:value=>value\n    onRejected = typeof onRejected === 'function'?onRejected:reason=>{throw reason}\n    let self = this\n    let promise2\n    if(self.state == 'fulfilled'){\n        promise2 = new MyPromise((resolve,reject)=>{\n            try {\n                let x = onFulFilled(self.value)\n                resolvePromise(promise2,x,resolve,reject)\n            } catch (error) {\n                reject(err)\n            }\n        })\n    }else if(self.state == 'rejected'){\n        promise2 = new MyPromise((resolve,reject)=>{\n            try {\n                let x = onRejected(self.reason)\n                resolvePromise(promise2,x,resolve,reject)\n            } catch (error) {\n                reject(error)\n            }\n        })\n    }else if(self.state == 'pending'){\n        promise2 = new MyPromise((resolve,reject)=>{\n            self.onResolvedCallbacks.push((value)=>{\n                try {\n                    let x = onFulFilled(value)\n                    resolvePromise(promise2,x,resolve,reject)\n                } catch (error) {\n                    reject(error)\n                }\n            })\n            self.onRejectedCallbacks.push((reason)=>{\n                try {\n                    let x = onRejected(reason)\n                    resolvePromise(promise2,x,resolve,reject)\n                } catch (error) {\n                    reject(error)\n                }\n            })\n        })\n    }\n    return promise2\n}\n```\n\n## 让我们来看一下resolvePromise这个函数，根据协议先判断是否是重复调用，然后定义then，called变量，根据协议判断x是否是对象还是函数，如果是字符串直接resolve，根据协议（如果在取x.then值时抛出了异常，则以这个异常做为原因将promise拒绝。）try/catch，然后让then等于x.then 判断then是否是函数，如果是则说明他是一个promise对象，不是则只是一个普通对象，直接resolve。让then的this指向x，根据协议（当 resolvePromise 被以 y为参数调用, 执行 [[Resolve]](promise, y)）则递归resolvePromise。根据协议，当resolvePromise和rejectPromise同时调用或者调用多次，则忽略后面的，所以用called阻止多次调用\n``` bash\nmyPromise.js\nfunction resolvePromise(promise2,x,resolve,reject){\n    if(promise2 === x)reject(new TypeError('重复调用'))\n    let then,called\n    if(x !=null &&(typeof x === 'function' || typeof x === 'object')){\n        try {\n            then = x.then\n            if(typeof then === 'function'){\n                then.call(x,function(y){\n                    if(called)return\n                    called = true\n                    resolvePromise(promise2,y,resolve,reject)\n                },function(err){\n                    if(called)return\n                    called = true\n                    reject(err)\n                })\n            }else{\n                resolve(x)\n            }\n        } catch (error) {\n            if(called)return\n            called = true\n            reject(error)\n        }\n    }else{\n        resolve(x)\n    }\n}\n```\n\n## 下面是myPromise.all方法\n### index.js改动如下 两个myPromise实例 分别异步时间不同\n``` bash\nindex.js\nconst MyPromise = require('./myPromise')\n\nlet promiseA = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功A')\n        }else{\n            reject('小于失败A')\n        }\n    },2000)\n})\nlet promiseB = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功B')\n        }else{\n            reject('小于失败B')\n        }\n    },3000)\n})\n\nMyPromise.all([promiseA,promiseB]).then((value)=>{\n    console.log(`我是value1： ${value[0]}`)\n    console.log(`我是value2： ${value[1]}`)\n},(reason)=>{\n    console.log(`我是reason： ${reason}`)\n})\n```\n### myPromise.js文件添加如下代码，在myPromise自身设置一个all方法，传入进入的是一个数组promises，返回的也是一个promise对象，用result保存多个promise返回的值，循环promises分别调用then方法，当i===primises.lenght-1时并且called为true时,就是说明所有promise都执行完毕并且没有报错，则直接resolve这个result数组结果，只要一个报错，直接reject\n``` bash\nmyPromise.js\nmyPromise.all = function(promises){\n    return new myPromise((resolve,reject)=>{\n        let result = []\n        let called = true\n        for(let i=0;i<promises.length;i++){\n            promises[i].then((value)=>{\n                result[i] = value\n                if(i=== promises.length-1 && called){\n                    resolve(result)\n                }\n            },(reason)=>{\n                called = false\n                reject(reason)\n            })\n        }\n    })\n}\n```\n## 下面是myPromise.race方法\n### 和all方法的index.js差别在让promiseB时间短，好看出B能在A前一步执行完\n``` bash\nindex.js\nconst MyPromise = require('./myPromise')\n\nlet promiseA = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功A')\n        }else{\n            reject('小于失败A')\n        }\n    },2000)\n})\nlet promiseB = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功B')\n        }else{\n            reject('小于失败B')\n        }\n    },1000)\n})\n\nMyPromise.race([promiseA,promiseB]).then((value)=>{\n    console.log(`我是value： ${value}`)\n},(reason)=>{\n    console.log(`我是reason： ${reason}`)\n})\n```\n### myPromise文件给MyPromise添加静态方法race，和all相似，不过在调用promise的then方法时，让数组保存临时值，判断当数组length为1时，则直接执行resolve或者reject\n``` bash\nmyPromise.js\nMyPromise.race = function(promises){\n    return new MyPromise((resolve,reject)=>{\n        let result = []\n        promises.forEach(promise=>{\n            promise.then((value)=>{\n                result.push(value)\n                if(result.length == 1){\n                    resolve(value)\n                }\n            },(reason)=>{\n                result.push(reason)\n                if(result.length == 1){\n                    reject(reason)\n                }\n            })\n        })\n    })\n}\n```\n\n","source":"_posts/javascript/promise.md","raw":"---\ntitle: promise 原理解析\ndate: 2018/01/11\ncategories:\n- javascript\ntags:\n- javascript\n- es6\n- es7\n- promise\n- promise.all\n- promise.race\n- promise.resolve\n- promise.reject\n---\n\n###### promise用法，根据promise/A+协议，分析promise原理，具体协议请查阅 \n###### https://segmentfault.com/a/1190000002452115\n\n## 创建一个文件index.js并且创建一个promise实例,创建随机数num 当大于0.5时resolve，当小于0.5时reject，用then方法接收resolve返回值为value，reject返回值为reason\n``` bash\nindex.js\nlet promiseA = new Promise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功')\n        }else{\n            reject('小于失败')\n        }\n    },2000)\n})\npromiseA.then((value)=>{\n    console.log(value)\n},(reason)=>{\n    console.log(reason)\n})\n```\n## 这是原生promise实例，现在开始创建我们自己的promise\n### 1.首先创建一个新的文件myPromise.js，将其导出，以便引用。其中task为new Promise(callback)的callback函数\n``` bash\nmyPromise.js\nfunction myPromise(task){\n\n}\nmodule.exports = myPromise\n```\n### 2.在index.js文件中引入我们创建的myPromise，并且生成新实例new MyPromise()\n``` bash\nindex.js\nconst MyPromise = require('./myPromise')\n\nlet promiseA = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功')\n        }else{\n            reject('小于失败')\n        }\n    },2000)\n})\n\npromiseA.then((value)=>{\n    console.log(value)\n},(reason)=>{\n    console.log(reason)\n})\n```\n## 在myPromise.js文件中添加如下代码，在这里用self接受this对象，然后给myPromise构造函数添加属性，state代表状态pending fulfilled和rejected的变化，value和reason分别用来保存myPromise实例resolve和reject传入的值而不是自身构造函数的形参，resolve和reject函数来接收new myPromise的resolve和reject的参数\n``` bash\nmyPromise.js\nlet self = this\nself.state = 'pending'\nself.value = undefined\nself.reason = undefined\n\nfunction resolve(value){\n\n}\nfunction reject(reason){\n\n}\ntry{\n    task(resolve,reject)\n}catch(error){\n    reject(error)\n}\n```\n## myPromise构造函数添加onResolvedCallbacks和onRejectedCallbacks,用于临时保存then中函数，当实例resolve和reject的时候以便调用。在resolve函数中，先判断value是否是Promise的实例，如果是，说明resolve返回的是一个promise对象，所以递归value。当resolve或者reject调用的时候分别改变state状态为fulfilled和rejected。当调用then时，如果当前状态为fulfilled成功，则直接返回then的onFulfilled函数向外返回vaule，如果是rejectd状态，则调用onRejected函数，向外返回reason，如果正处于pending等候状态，则分别向onResolvedCallbacks，onRejectedCallbacks添加onFulFilled和onRejected以便resolve和reject调用\n``` bash\nmyPromise.js\nfunction myPromise(task){\n    let self = this\n    self.state = 'pending'\n    self.value = undefined\n    self.reason = undefined\n\n    self.onResolvedCallbacks = []\n    self.onRejectedCallbacks = []\n    function resolve(value){\n        if(value instanceof Promise){\n            return value.task(resolve,reject)\n        }\n        setTimeout(()=>{\n            self.state = 'fulfilled'\n            self.value = value\n            self.onResolvedCallbacks.forEach(item=>item(self.value))    \n        })\n    }\n    function reject(reason){\n        setTimeout(()=>{\n            self.state = 'rejected'\n            self.reason = reason\n            self.onRejectedCallbacks.forEach(item=>item(self.reason))\n        })\n    }\n    try{\n        task(resolve,reject)\n    }catch(error){\n        reject(error)\n    }\n}\nmyPromise.prototype.then = function(onFulFilled,onRejected){\n    let self = this\n    if(self.state == 'fulfilled'){\n        onFulFilled(self.value)\n    }else if(self.state == 'rejected'){\n        onRejected(self.reason)\n    }else if(self.state == 'pending'){\n        self.onResolvedCallbacks.push(onFulFilled)\n        self.onRejectedCallbacks.push(onRejected)\n    }\n}\n```\n\n## 现在改动一下index.js文件如下，在Promise的then方法上实现链式调用，也就是说第一个then返回的是一个promise对象，然后在调用then\n``` bash\nindex.js\nconst MyPromise = require('./myPromise')\n\nlet promiseA = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功')\n        }else{\n            reject('小于失败')\n        }\n    },2000)\n})\n\npromiseA.then((value)=>{\n    console.log(`我是value： ${value}`)\n    return new MyPromise((resolve,reject)=>{\n        resolve(value)\n    })\n},(reason)=>{\n    console.log(reason)\n}).then((data)=>{\n    console.log(`我是data： ${data}`)\n})\n```\n\n## 来让我们看一下myPromise.js这个文件,myPromise构造函数不做改动，先说一下then方法的改变，根据promise/A+协议，then必须返回一个promise对象，所以创建promise2，让then最终返回的是一个promise对象，在promise2中构建myPromise实例用法就是将task函数展现出来，根据协议说Promise解析过程 是以一个promise和一个值做为参数的抽象过程，可表示为[[Resolve]](promise, x)，所以重新封装一个函数resolvePromise接收promise2，x(协议：onFulfilled 或 onRejected 返回了值x, 则执行Promise 解析流程[[Resolve]](promise2, x)），resolve,reject封装函数调用,在其中先判断onFulFilled和onRejected是否是函数如果不是则直接返回接收值\n``` bash\nmyPromise.js\nfunction resolvePromise(promise2,x,resolve,reject){\n\n}\n\nmyPromise.prototype.then = function(onFulFilled,onRejected){\n    onFulFilled = typeof onFulFilled === 'function'?onFulFilled:value=>value\n    onRejected = typeof onRejected === 'function'?onRejected:reason=>{throw reason}\n    let self = this\n    let promise2\n    if(self.state == 'fulfilled'){\n        promise2 = new MyPromise((resolve,reject)=>{\n            try {\n                let x = onFulFilled(self.value)\n                resolvePromise(promise2,x,resolve,reject)\n            } catch (error) {\n                reject(err)\n            }\n        })\n    }else if(self.state == 'rejected'){\n        promise2 = new MyPromise((resolve,reject)=>{\n            try {\n                let x = onRejected(self.reason)\n                resolvePromise(promise2,x,resolve,reject)\n            } catch (error) {\n                reject(error)\n            }\n        })\n    }else if(self.state == 'pending'){\n        promise2 = new MyPromise((resolve,reject)=>{\n            self.onResolvedCallbacks.push((value)=>{\n                try {\n                    let x = onFulFilled(value)\n                    resolvePromise(promise2,x,resolve,reject)\n                } catch (error) {\n                    reject(error)\n                }\n            })\n            self.onRejectedCallbacks.push((reason)=>{\n                try {\n                    let x = onRejected(reason)\n                    resolvePromise(promise2,x,resolve,reject)\n                } catch (error) {\n                    reject(error)\n                }\n            })\n        })\n    }\n    return promise2\n}\n```\n\n## 让我们来看一下resolvePromise这个函数，根据协议先判断是否是重复调用，然后定义then，called变量，根据协议判断x是否是对象还是函数，如果是字符串直接resolve，根据协议（如果在取x.then值时抛出了异常，则以这个异常做为原因将promise拒绝。）try/catch，然后让then等于x.then 判断then是否是函数，如果是则说明他是一个promise对象，不是则只是一个普通对象，直接resolve。让then的this指向x，根据协议（当 resolvePromise 被以 y为参数调用, 执行 [[Resolve]](promise, y)）则递归resolvePromise。根据协议，当resolvePromise和rejectPromise同时调用或者调用多次，则忽略后面的，所以用called阻止多次调用\n``` bash\nmyPromise.js\nfunction resolvePromise(promise2,x,resolve,reject){\n    if(promise2 === x)reject(new TypeError('重复调用'))\n    let then,called\n    if(x !=null &&(typeof x === 'function' || typeof x === 'object')){\n        try {\n            then = x.then\n            if(typeof then === 'function'){\n                then.call(x,function(y){\n                    if(called)return\n                    called = true\n                    resolvePromise(promise2,y,resolve,reject)\n                },function(err){\n                    if(called)return\n                    called = true\n                    reject(err)\n                })\n            }else{\n                resolve(x)\n            }\n        } catch (error) {\n            if(called)return\n            called = true\n            reject(error)\n        }\n    }else{\n        resolve(x)\n    }\n}\n```\n\n## 下面是myPromise.all方法\n### index.js改动如下 两个myPromise实例 分别异步时间不同\n``` bash\nindex.js\nconst MyPromise = require('./myPromise')\n\nlet promiseA = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功A')\n        }else{\n            reject('小于失败A')\n        }\n    },2000)\n})\nlet promiseB = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功B')\n        }else{\n            reject('小于失败B')\n        }\n    },3000)\n})\n\nMyPromise.all([promiseA,promiseB]).then((value)=>{\n    console.log(`我是value1： ${value[0]}`)\n    console.log(`我是value2： ${value[1]}`)\n},(reason)=>{\n    console.log(`我是reason： ${reason}`)\n})\n```\n### myPromise.js文件添加如下代码，在myPromise自身设置一个all方法，传入进入的是一个数组promises，返回的也是一个promise对象，用result保存多个promise返回的值，循环promises分别调用then方法，当i===primises.lenght-1时并且called为true时,就是说明所有promise都执行完毕并且没有报错，则直接resolve这个result数组结果，只要一个报错，直接reject\n``` bash\nmyPromise.js\nmyPromise.all = function(promises){\n    return new myPromise((resolve,reject)=>{\n        let result = []\n        let called = true\n        for(let i=0;i<promises.length;i++){\n            promises[i].then((value)=>{\n                result[i] = value\n                if(i=== promises.length-1 && called){\n                    resolve(result)\n                }\n            },(reason)=>{\n                called = false\n                reject(reason)\n            })\n        }\n    })\n}\n```\n## 下面是myPromise.race方法\n### 和all方法的index.js差别在让promiseB时间短，好看出B能在A前一步执行完\n``` bash\nindex.js\nconst MyPromise = require('./myPromise')\n\nlet promiseA = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功A')\n        }else{\n            reject('小于失败A')\n        }\n    },2000)\n})\nlet promiseB = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功B')\n        }else{\n            reject('小于失败B')\n        }\n    },1000)\n})\n\nMyPromise.race([promiseA,promiseB]).then((value)=>{\n    console.log(`我是value： ${value}`)\n},(reason)=>{\n    console.log(`我是reason： ${reason}`)\n})\n```\n### myPromise文件给MyPromise添加静态方法race，和all相似，不过在调用promise的then方法时，让数组保存临时值，判断当数组length为1时，则直接执行resolve或者reject\n``` bash\nmyPromise.js\nMyPromise.race = function(promises){\n    return new MyPromise((resolve,reject)=>{\n        let result = []\n        promises.forEach(promise=>{\n            promise.then((value)=>{\n                result.push(value)\n                if(result.length == 1){\n                    resolve(value)\n                }\n            },(reason)=>{\n                result.push(reason)\n                if(result.length == 1){\n                    reject(reason)\n                }\n            })\n        })\n    })\n}\n```\n\n","slug":"javascript/promise","published":1,"updated":"2018-01-13T05:12:26.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcjtejfo0003x8xbquziji4q","content":"<h6 id=\"promise用法，根据promise-A-协议，分析promise原理，具体协议请查阅\"><a href=\"#promise用法，根据promise-A-协议，分析promise原理，具体协议请查阅\" class=\"headerlink\" title=\"promise用法，根据promise/A+协议，分析promise原理，具体协议请查阅\"></a>promise用法，根据promise/A+协议，分析promise原理，具体协议请查阅</h6><h6 id=\"https-segmentfault-com-a-1190000002452115\"><a href=\"#https-segmentfault-com-a-1190000002452115\" class=\"headerlink\" title=\"https://segmentfault.com/a/1190000002452115\"></a><a href=\"https://segmentfault.com/a/1190000002452115\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000002452115</a></h6><h2 id=\"创建一个文件index-js并且创建一个promise实例-创建随机数num-当大于0-5时resolve，当小于0-5时reject，用then方法接收resolve返回值为value，reject返回值为reason\"><a href=\"#创建一个文件index-js并且创建一个promise实例-创建随机数num-当大于0-5时resolve，当小于0-5时reject，用then方法接收resolve返回值为value，reject返回值为reason\" class=\"headerlink\" title=\"创建一个文件index.js并且创建一个promise实例,创建随机数num 当大于0.5时resolve，当小于0.5时reject，用then方法接收resolve返回值为value，reject返回值为reason\"></a>创建一个文件index.js并且创建一个promise实例,创建随机数num 当大于0.5时resolve，当小于0.5时reject，用then方法接收resolve返回值为value，reject返回值为reason</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.js</span><br><span class=\"line\"><span class=\"built_in\">let</span> promiseA = new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> num = Math.random()</span><br><span class=\"line\">    setTimeout(()=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;.5)&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">'大于成功'</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'小于失败'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,2000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promiseA.then((value)=&gt;&#123;</span><br><span class=\"line\">    console.log(value)</span><br><span class=\"line\">&#125;,(reason)=&gt;&#123;</span><br><span class=\"line\">    console.log(reason)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"这是原生promise实例，现在开始创建我们自己的promise\"><a href=\"#这是原生promise实例，现在开始创建我们自己的promise\" class=\"headerlink\" title=\"这是原生promise实例，现在开始创建我们自己的promise\"></a>这是原生promise实例，现在开始创建我们自己的promise</h2><h3 id=\"1-首先创建一个新的文件myPromise-js，将其导出，以便引用。其中task为new-Promise-callback-的callback函数\"><a href=\"#1-首先创建一个新的文件myPromise-js，将其导出，以便引用。其中task为new-Promise-callback-的callback函数\" class=\"headerlink\" title=\"1.首先创建一个新的文件myPromise.js，将其导出，以便引用。其中task为new Promise(callback)的callback函数\"></a>1.首先创建一个新的文件myPromise.js，将其导出，以便引用。其中task为new Promise(callback)的callback函数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myPromise.js</span><br><span class=\"line\"><span class=\"keyword\">function</span> myPromise(task)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = myPromise</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-在index-js文件中引入我们创建的myPromise，并且生成新实例new-MyPromise\"><a href=\"#2-在index-js文件中引入我们创建的myPromise，并且生成新实例new-MyPromise\" class=\"headerlink\" title=\"2.在index.js文件中引入我们创建的myPromise，并且生成新实例new MyPromise()\"></a>2.在index.js文件中引入我们创建的myPromise，并且生成新实例new MyPromise()</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.js</span><br><span class=\"line\">const MyPromise = require(<span class=\"string\">'./myPromise'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> promiseA = new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> num = Math.random()</span><br><span class=\"line\">    setTimeout(()=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;.5)&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">'大于成功'</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'小于失败'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,2000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">promiseA.then((value)=&gt;&#123;</span><br><span class=\"line\">    console.log(value)</span><br><span class=\"line\">&#125;,(reason)=&gt;&#123;</span><br><span class=\"line\">    console.log(reason)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"在myPromise-js文件中添加如下代码，在这里用self接受this对象，然后给myPromise构造函数添加属性，state代表状态pending-fulfilled和rejected的变化，value和reason分别用来保存myPromise实例resolve和reject传入的值而不是自身构造函数的形参，resolve和reject函数来接收new-myPromise的resolve和reject的参数\"><a href=\"#在myPromise-js文件中添加如下代码，在这里用self接受this对象，然后给myPromise构造函数添加属性，state代表状态pending-fulfilled和rejected的变化，value和reason分别用来保存myPromise实例resolve和reject传入的值而不是自身构造函数的形参，resolve和reject函数来接收new-myPromise的resolve和reject的参数\" class=\"headerlink\" title=\"在myPromise.js文件中添加如下代码，在这里用self接受this对象，然后给myPromise构造函数添加属性，state代表状态pending fulfilled和rejected的变化，value和reason分别用来保存myPromise实例resolve和reject传入的值而不是自身构造函数的形参，resolve和reject函数来接收new myPromise的resolve和reject的参数\"></a>在myPromise.js文件中添加如下代码，在这里用self接受this对象，然后给myPromise构造函数添加属性，state代表状态pending fulfilled和rejected的变化，value和reason分别用来保存myPromise实例resolve和reject传入的值而不是自身构造函数的形参，resolve和reject函数来接收new myPromise的resolve和reject的参数</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myPromise.js</span><br><span class=\"line\"><span class=\"built_in\">let</span> self = this</span><br><span class=\"line\">self.state = <span class=\"string\">'pending'</span></span><br><span class=\"line\">self.value = undefined</span><br><span class=\"line\">self.reason = undefined</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> resolve(value)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> reject(reason)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">try&#123;</span><br><span class=\"line\">    task(resolve,reject)</span><br><span class=\"line\">&#125;catch(error)&#123;</span><br><span class=\"line\">    reject(error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"myPromise构造函数添加onResolvedCallbacks和onRejectedCallbacks-用于临时保存then中函数，当实例resolve和reject的时候以便调用。在resolve函数中，先判断value是否是Promise的实例，如果是，说明resolve返回的是一个promise对象，所以递归value。当resolve或者reject调用的时候分别改变state状态为fulfilled和rejected。当调用then时，如果当前状态为fulfilled成功，则直接返回then的onFulfilled函数向外返回vaule，如果是rejectd状态，则调用onRejected函数，向外返回reason，如果正处于pending等候状态，则分别向onResolvedCallbacks，onRejectedCallbacks添加onFulFilled和onRejected以便resolve和reject调用\"><a href=\"#myPromise构造函数添加onResolvedCallbacks和onRejectedCallbacks-用于临时保存then中函数，当实例resolve和reject的时候以便调用。在resolve函数中，先判断value是否是Promise的实例，如果是，说明resolve返回的是一个promise对象，所以递归value。当resolve或者reject调用的时候分别改变state状态为fulfilled和rejected。当调用then时，如果当前状态为fulfilled成功，则直接返回then的onFulfilled函数向外返回vaule，如果是rejectd状态，则调用onRejected函数，向外返回reason，如果正处于pending等候状态，则分别向onResolvedCallbacks，onRejectedCallbacks添加onFulFilled和onRejected以便resolve和reject调用\" class=\"headerlink\" title=\"myPromise构造函数添加onResolvedCallbacks和onRejectedCallbacks,用于临时保存then中函数，当实例resolve和reject的时候以便调用。在resolve函数中，先判断value是否是Promise的实例，如果是，说明resolve返回的是一个promise对象，所以递归value。当resolve或者reject调用的时候分别改变state状态为fulfilled和rejected。当调用then时，如果当前状态为fulfilled成功，则直接返回then的onFulfilled函数向外返回vaule，如果是rejectd状态，则调用onRejected函数，向外返回reason，如果正处于pending等候状态，则分别向onResolvedCallbacks，onRejectedCallbacks添加onFulFilled和onRejected以便resolve和reject调用\"></a>myPromise构造函数添加onResolvedCallbacks和onRejectedCallbacks,用于临时保存then中函数，当实例resolve和reject的时候以便调用。在resolve函数中，先判断value是否是Promise的实例，如果是，说明resolve返回的是一个promise对象，所以递归value。当resolve或者reject调用的时候分别改变state状态为fulfilled和rejected。当调用then时，如果当前状态为fulfilled成功，则直接返回then的onFulfilled函数向外返回vaule，如果是rejectd状态，则调用onRejected函数，向外返回reason，如果正处于pending等候状态，则分别向onResolvedCallbacks，onRejectedCallbacks添加onFulFilled和onRejected以便resolve和reject调用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myPromise.js</span><br><span class=\"line\"><span class=\"keyword\">function</span> myPromise(task)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> self = this</span><br><span class=\"line\">    self.state = <span class=\"string\">'pending'</span></span><br><span class=\"line\">    self.value = undefined</span><br><span class=\"line\">    self.reason = undefined</span><br><span class=\"line\"></span><br><span class=\"line\">    self.onResolvedCallbacks = []</span><br><span class=\"line\">    self.onRejectedCallbacks = []</span><br><span class=\"line\">    <span class=\"keyword\">function</span> resolve(value)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(value instanceof Promise)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> value.task(resolve,reject)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        setTimeout(()=&gt;&#123;</span><br><span class=\"line\">            self.state = <span class=\"string\">'fulfilled'</span></span><br><span class=\"line\">            self.value = value</span><br><span class=\"line\">            self.onResolvedCallbacks.forEach(item=&gt;item(self.value))    </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> reject(reason)&#123;</span><br><span class=\"line\">        setTimeout(()=&gt;&#123;</span><br><span class=\"line\">            self.state = <span class=\"string\">'rejected'</span></span><br><span class=\"line\">            self.reason = reason</span><br><span class=\"line\">            self.onRejectedCallbacks.forEach(item=&gt;item(self.reason))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        task(resolve,reject)</span><br><span class=\"line\">    &#125;catch(error)&#123;</span><br><span class=\"line\">        reject(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myPromise.prototype.then = <span class=\"keyword\">function</span>(onFulFilled,onRejected)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> self = this</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.state == <span class=\"string\">'fulfilled'</span>)&#123;</span><br><span class=\"line\">        onFulFilled(self.value)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(self.state == <span class=\"string\">'rejected'</span>)&#123;</span><br><span class=\"line\">        onRejected(self.reason)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(self.state == <span class=\"string\">'pending'</span>)&#123;</span><br><span class=\"line\">        self.onResolvedCallbacks.push(onFulFilled)</span><br><span class=\"line\">        self.onRejectedCallbacks.push(onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"现在改动一下index-js文件如下，在Promise的then方法上实现链式调用，也就是说第一个then返回的是一个promise对象，然后在调用then\"><a href=\"#现在改动一下index-js文件如下，在Promise的then方法上实现链式调用，也就是说第一个then返回的是一个promise对象，然后在调用then\" class=\"headerlink\" title=\"现在改动一下index.js文件如下，在Promise的then方法上实现链式调用，也就是说第一个then返回的是一个promise对象，然后在调用then\"></a>现在改动一下index.js文件如下，在Promise的then方法上实现链式调用，也就是说第一个then返回的是一个promise对象，然后在调用then</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.js</span><br><span class=\"line\">const MyPromise = require(<span class=\"string\">'./myPromise'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> promiseA = new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> num = Math.random()</span><br><span class=\"line\">    setTimeout(()=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;.5)&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">'大于成功'</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'小于失败'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,2000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">promiseA.then((value)=&gt;&#123;</span><br><span class=\"line\">    console.log(`我是value： <span class=\"variable\">$&#123;value&#125;</span>`)</span><br><span class=\"line\">    <span class=\"built_in\">return</span> new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">        resolve(value)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,(reason)=&gt;&#123;</span><br><span class=\"line\">    console.log(reason)</span><br><span class=\"line\">&#125;).<span class=\"keyword\">then</span>((data)=&gt;&#123;</span><br><span class=\"line\">    console.log(`我是data： <span class=\"variable\">$&#123;data&#125;</span>`)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"来让我们看一下myPromise-js这个文件-myPromise构造函数不做改动，先说一下then方法的改变，根据promise-A-协议，then必须返回一个promise对象，所以创建promise2，让then最终返回的是一个promise对象，在promise2中构建myPromise实例用法就是将task函数展现出来，根据协议说Promise解析过程-是以一个promise和一个值做为参数的抽象过程，可表示为-Resolve-，所以重新封装一个函数resolvePromise接收promise2，x-协议：onFulfilled-或-onRejected-返回了值x-则执行Promise-解析流程-Resolve-），resolve-reject封装函数调用-在其中先判断onFulFilled和onRejected是否是函数如果不是则直接返回接收值\"><a href=\"#来让我们看一下myPromise-js这个文件-myPromise构造函数不做改动，先说一下then方法的改变，根据promise-A-协议，then必须返回一个promise对象，所以创建promise2，让then最终返回的是一个promise对象，在promise2中构建myPromise实例用法就是将task函数展现出来，根据协议说Promise解析过程-是以一个promise和一个值做为参数的抽象过程，可表示为-Resolve-，所以重新封装一个函数resolvePromise接收promise2，x-协议：onFulfilled-或-onRejected-返回了值x-则执行Promise-解析流程-Resolve-），resolve-reject封装函数调用-在其中先判断onFulFilled和onRejected是否是函数如果不是则直接返回接收值\" class=\"headerlink\" title=\"来让我们看一下myPromise.js这个文件,myPromise构造函数不做改动，先说一下then方法的改变，根据promise/A+协议，then必须返回一个promise对象，所以创建promise2，让then最终返回的是一个promise对象，在promise2中构建myPromise实例用法就是将task函数展现出来，根据协议说Promise解析过程 是以一个promise和一个值做为参数的抽象过程，可表示为[Resolve]，所以重新封装一个函数resolvePromise接收promise2，x(协议：onFulfilled 或 onRejected 返回了值x, 则执行Promise 解析流程[Resolve]），resolve,reject封装函数调用,在其中先判断onFulFilled和onRejected是否是函数如果不是则直接返回接收值\"></a>来让我们看一下myPromise.js这个文件,myPromise构造函数不做改动，先说一下then方法的改变，根据promise/A+协议，then必须返回一个promise对象，所以创建promise2，让then最终返回的是一个promise对象，在promise2中构建myPromise实例用法就是将task函数展现出来，根据协议说Promise解析过程 是以一个promise和一个值做为参数的抽象过程，可表示为<a href=\"promise, x\">[Resolve]</a>，所以重新封装一个函数resolvePromise接收promise2，x(协议：onFulfilled 或 onRejected 返回了值x, 则执行Promise 解析流程<a href=\"promise2, x\">[Resolve]</a>），resolve,reject封装函数调用,在其中先判断onFulFilled和onRejected是否是函数如果不是则直接返回接收值</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myPromise.js</span><br><span class=\"line\"><span class=\"keyword\">function</span> resolvePromise(promise2,x,resolve,reject)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">myPromise.prototype.then = <span class=\"keyword\">function</span>(onFulFilled,onRejected)&#123;</span><br><span class=\"line\">    onFulFilled = typeof onFulFilled === <span class=\"string\">'function'</span>?onFulFilled:value=&gt;value</span><br><span class=\"line\">    onRejected = typeof onRejected === <span class=\"string\">'function'</span>?onRejected:reason=&gt;&#123;throw reason&#125;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> self = this</span><br><span class=\"line\">    <span class=\"built_in\">let</span> promise2</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.state == <span class=\"string\">'fulfilled'</span>)&#123;</span><br><span class=\"line\">        promise2 = new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                <span class=\"built_in\">let</span> x = onFulFilled(self.value)</span><br><span class=\"line\">                resolvePromise(promise2,x,resolve,reject)</span><br><span class=\"line\">            &#125; catch (error) &#123;</span><br><span class=\"line\">                reject(err)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(self.state == <span class=\"string\">'rejected'</span>)&#123;</span><br><span class=\"line\">        promise2 = new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                <span class=\"built_in\">let</span> x = onRejected(self.reason)</span><br><span class=\"line\">                resolvePromise(promise2,x,resolve,reject)</span><br><span class=\"line\">            &#125; catch (error) &#123;</span><br><span class=\"line\">                reject(error)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(self.state == <span class=\"string\">'pending'</span>)&#123;</span><br><span class=\"line\">        promise2 = new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">            self.onResolvedCallbacks.push((value)=&gt;&#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">let</span> x = onFulFilled(value)</span><br><span class=\"line\">                    resolvePromise(promise2,x,resolve,reject)</span><br><span class=\"line\">                &#125; catch (error) &#123;</span><br><span class=\"line\">                    reject(error)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            self.onRejectedCallbacks.push((reason)=&gt;&#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">let</span> x = onRejected(reason)</span><br><span class=\"line\">                    resolvePromise(promise2,x,resolve,reject)</span><br><span class=\"line\">                &#125; catch (error) &#123;</span><br><span class=\"line\">                    reject(error)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> promise2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"让我们来看一下resolvePromise这个函数，根据协议先判断是否是重复调用，然后定义then，called变量，根据协议判断x是否是对象还是函数，如果是字符串直接resolve，根据协议（如果在取x-then值时抛出了异常，则以这个异常做为原因将promise拒绝。）try-catch，然后让then等于x-then-判断then是否是函数，如果是则说明他是一个promise对象，不是则只是一个普通对象，直接resolve。让then的this指向x，根据协议（当-resolvePromise-被以-y为参数调用-执行-Resolve-）则递归resolvePromise。根据协议，当resolvePromise和rejectPromise同时调用或者调用多次，则忽略后面的，所以用called阻止多次调用\"><a href=\"#让我们来看一下resolvePromise这个函数，根据协议先判断是否是重复调用，然后定义then，called变量，根据协议判断x是否是对象还是函数，如果是字符串直接resolve，根据协议（如果在取x-then值时抛出了异常，则以这个异常做为原因将promise拒绝。）try-catch，然后让then等于x-then-判断then是否是函数，如果是则说明他是一个promise对象，不是则只是一个普通对象，直接resolve。让then的this指向x，根据协议（当-resolvePromise-被以-y为参数调用-执行-Resolve-）则递归resolvePromise。根据协议，当resolvePromise和rejectPromise同时调用或者调用多次，则忽略后面的，所以用called阻止多次调用\" class=\"headerlink\" title=\"让我们来看一下resolvePromise这个函数，根据协议先判断是否是重复调用，然后定义then，called变量，根据协议判断x是否是对象还是函数，如果是字符串直接resolve，根据协议（如果在取x.then值时抛出了异常，则以这个异常做为原因将promise拒绝。）try/catch，然后让then等于x.then 判断then是否是函数，如果是则说明他是一个promise对象，不是则只是一个普通对象，直接resolve。让then的this指向x，根据协议（当 resolvePromise 被以 y为参数调用, 执行 [Resolve]）则递归resolvePromise。根据协议，当resolvePromise和rejectPromise同时调用或者调用多次，则忽略后面的，所以用called阻止多次调用\"></a>让我们来看一下resolvePromise这个函数，根据协议先判断是否是重复调用，然后定义then，called变量，根据协议判断x是否是对象还是函数，如果是字符串直接resolve，根据协议（如果在取x.then值时抛出了异常，则以这个异常做为原因将promise拒绝。）try/catch，然后让then等于x.then 判断then是否是函数，如果是则说明他是一个promise对象，不是则只是一个普通对象，直接resolve。让then的this指向x，根据协议（当 resolvePromise 被以 y为参数调用, 执行 <a href=\"promise, y\">[Resolve]</a>）则递归resolvePromise。根据协议，当resolvePromise和rejectPromise同时调用或者调用多次，则忽略后面的，所以用called阻止多次调用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myPromise.js</span><br><span class=\"line\"><span class=\"keyword\">function</span> resolvePromise(promise2,x,resolve,reject)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(promise2 === x)reject(new TypeError(<span class=\"string\">'重复调用'</span>))</span><br><span class=\"line\">    <span class=\"built_in\">let</span> <span class=\"keyword\">then</span>,called</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x !=null &amp;&amp;(typeof x === <span class=\"string\">'function'</span> || typeof x === <span class=\"string\">'object'</span>))&#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            <span class=\"keyword\">then</span> = x.then</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(typeof <span class=\"keyword\">then</span> === <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">                then.call(x,<span class=\"keyword\">function</span>(y)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(called)<span class=\"built_in\">return</span></span><br><span class=\"line\">                    called = <span class=\"literal\">true</span></span><br><span class=\"line\">                    resolvePromise(promise2,y,resolve,reject)</span><br><span class=\"line\">                &#125;,<span class=\"keyword\">function</span>(err)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(called)<span class=\"built_in\">return</span></span><br><span class=\"line\">                    called = <span class=\"literal\">true</span></span><br><span class=\"line\">                    reject(err)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                resolve(x)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (error) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(called)<span class=\"built_in\">return</span></span><br><span class=\"line\">            called = <span class=\"literal\">true</span></span><br><span class=\"line\">            reject(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        resolve(x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"下面是myPromise-all方法\"><a href=\"#下面是myPromise-all方法\" class=\"headerlink\" title=\"下面是myPromise.all方法\"></a>下面是myPromise.all方法</h2><h3 id=\"index-js改动如下-两个myPromise实例-分别异步时间不同\"><a href=\"#index-js改动如下-两个myPromise实例-分别异步时间不同\" class=\"headerlink\" title=\"index.js改动如下 两个myPromise实例 分别异步时间不同\"></a>index.js改动如下 两个myPromise实例 分别异步时间不同</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.js</span><br><span class=\"line\">const MyPromise = require(<span class=\"string\">'./myPromise'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> promiseA = new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> num = Math.random()</span><br><span class=\"line\">    setTimeout(()=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;.5)&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">'大于成功A'</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'小于失败A'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,2000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">let</span> promiseB = new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> num = Math.random()</span><br><span class=\"line\">    setTimeout(()=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;.5)&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">'大于成功B'</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'小于失败B'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,3000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">MyPromise.all([promiseA,promiseB]).<span class=\"keyword\">then</span>((value)=&gt;&#123;</span><br><span class=\"line\">    console.log(`我是value1： <span class=\"variable\">$&#123;value[0]&#125;</span>`)</span><br><span class=\"line\">    console.log(`我是value2： <span class=\"variable\">$&#123;value[1]&#125;</span>`)</span><br><span class=\"line\">&#125;,(reason)=&gt;&#123;</span><br><span class=\"line\">    console.log(`我是reason： <span class=\"variable\">$&#123;reason&#125;</span>`)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"myPromise-js文件添加如下代码，在myPromise自身设置一个all方法，传入进入的是一个数组promises，返回的也是一个promise对象，用result保存多个promise返回的值，循环promises分别调用then方法，当i-primises-lenght-1时并且called为true时-就是说明所有promise都执行完毕并且没有报错，则直接resolve这个result数组结果，只要一个报错，直接reject\"><a href=\"#myPromise-js文件添加如下代码，在myPromise自身设置一个all方法，传入进入的是一个数组promises，返回的也是一个promise对象，用result保存多个promise返回的值，循环promises分别调用then方法，当i-primises-lenght-1时并且called为true时-就是说明所有promise都执行完毕并且没有报错，则直接resolve这个result数组结果，只要一个报错，直接reject\" class=\"headerlink\" title=\"myPromise.js文件添加如下代码，在myPromise自身设置一个all方法，传入进入的是一个数组promises，返回的也是一个promise对象，用result保存多个promise返回的值，循环promises分别调用then方法，当i===primises.lenght-1时并且called为true时,就是说明所有promise都执行完毕并且没有报错，则直接resolve这个result数组结果，只要一个报错，直接reject\"></a>myPromise.js文件添加如下代码，在myPromise自身设置一个all方法，传入进入的是一个数组promises，返回的也是一个promise对象，用result保存多个promise返回的值，循环promises分别调用then方法，当i===primises.lenght-1时并且called为true时,就是说明所有promise都执行完毕并且没有报错，则直接resolve这个result数组结果，只要一个报错，直接reject</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myPromise.js</span><br><span class=\"line\">myPromise.all = <span class=\"keyword\">function</span>(promises)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> new myPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> result = []</span><br><span class=\"line\">        <span class=\"built_in\">let</span> called = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> i=0;i&lt;promises.length;i++)&#123;</span><br><span class=\"line\">            promises[i].<span class=\"keyword\">then</span>((value)=&gt;&#123;</span><br><span class=\"line\">                result[i] = value</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i=== promises.length-1 &amp;&amp; called)&#123;</span><br><span class=\"line\">                    resolve(result)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,(reason)=&gt;&#123;</span><br><span class=\"line\">                called = <span class=\"literal\">false</span></span><br><span class=\"line\">                reject(reason)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"下面是myPromise-race方法\"><a href=\"#下面是myPromise-race方法\" class=\"headerlink\" title=\"下面是myPromise.race方法\"></a>下面是myPromise.race方法</h2><h3 id=\"和all方法的index-js差别在让promiseB时间短，好看出B能在A前一步执行完\"><a href=\"#和all方法的index-js差别在让promiseB时间短，好看出B能在A前一步执行完\" class=\"headerlink\" title=\"和all方法的index.js差别在让promiseB时间短，好看出B能在A前一步执行完\"></a>和all方法的index.js差别在让promiseB时间短，好看出B能在A前一步执行完</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.js</span><br><span class=\"line\">const MyPromise = require(<span class=\"string\">'./myPromise'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> promiseA = new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> num = Math.random()</span><br><span class=\"line\">    setTimeout(()=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;.5)&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">'大于成功A'</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'小于失败A'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,2000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">let</span> promiseB = new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> num = Math.random()</span><br><span class=\"line\">    setTimeout(()=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;.5)&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">'大于成功B'</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'小于失败B'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,1000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">MyPromise.race([promiseA,promiseB]).<span class=\"keyword\">then</span>((value)=&gt;&#123;</span><br><span class=\"line\">    console.log(`我是value： <span class=\"variable\">$&#123;value&#125;</span>`)</span><br><span class=\"line\">&#125;,(reason)=&gt;&#123;</span><br><span class=\"line\">    console.log(`我是reason： <span class=\"variable\">$&#123;reason&#125;</span>`)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"myPromise文件给MyPromise添加静态方法race，和all相似，不过在调用promise的then方法时，让数组保存临时值，判断当数组length为1时，则直接执行resolve或者reject\"><a href=\"#myPromise文件给MyPromise添加静态方法race，和all相似，不过在调用promise的then方法时，让数组保存临时值，判断当数组length为1时，则直接执行resolve或者reject\" class=\"headerlink\" title=\"myPromise文件给MyPromise添加静态方法race，和all相似，不过在调用promise的then方法时，让数组保存临时值，判断当数组length为1时，则直接执行resolve或者reject\"></a>myPromise文件给MyPromise添加静态方法race，和all相似，不过在调用promise的then方法时，让数组保存临时值，判断当数组length为1时，则直接执行resolve或者reject</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myPromise.js</span><br><span class=\"line\">MyPromise.race = <span class=\"keyword\">function</span>(promises)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> result = []</span><br><span class=\"line\">        promises.forEach(promise=&gt;&#123;</span><br><span class=\"line\">            promise.then((value)=&gt;&#123;</span><br><span class=\"line\">                result.push(value)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result.length == 1)&#123;</span><br><span class=\"line\">                    resolve(value)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,(reason)=&gt;&#123;</span><br><span class=\"line\">                result.push(reason)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result.length == 1)&#123;</span><br><span class=\"line\">                    reject(reason)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"promise用法，根据promise-A-协议，分析promise原理，具体协议请查阅\"><a href=\"#promise用法，根据promise-A-协议，分析promise原理，具体协议请查阅\" class=\"headerlink\" title=\"promise用法，根据promise/A+协议，分析promise原理，具体协议请查阅\"></a>promise用法，根据promise/A+协议，分析promise原理，具体协议请查阅</h6><h6 id=\"https-segmentfault-com-a-1190000002452115\"><a href=\"#https-segmentfault-com-a-1190000002452115\" class=\"headerlink\" title=\"https://segmentfault.com/a/1190000002452115\"></a><a href=\"https://segmentfault.com/a/1190000002452115\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000002452115</a></h6><h2 id=\"创建一个文件index-js并且创建一个promise实例-创建随机数num-当大于0-5时resolve，当小于0-5时reject，用then方法接收resolve返回值为value，reject返回值为reason\"><a href=\"#创建一个文件index-js并且创建一个promise实例-创建随机数num-当大于0-5时resolve，当小于0-5时reject，用then方法接收resolve返回值为value，reject返回值为reason\" class=\"headerlink\" title=\"创建一个文件index.js并且创建一个promise实例,创建随机数num 当大于0.5时resolve，当小于0.5时reject，用then方法接收resolve返回值为value，reject返回值为reason\"></a>创建一个文件index.js并且创建一个promise实例,创建随机数num 当大于0.5时resolve，当小于0.5时reject，用then方法接收resolve返回值为value，reject返回值为reason</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.js</span><br><span class=\"line\"><span class=\"built_in\">let</span> promiseA = new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> num = Math.random()</span><br><span class=\"line\">    setTimeout(()=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;.5)&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">'大于成功'</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'小于失败'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,2000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">promiseA.then((value)=&gt;&#123;</span><br><span class=\"line\">    console.log(value)</span><br><span class=\"line\">&#125;,(reason)=&gt;&#123;</span><br><span class=\"line\">    console.log(reason)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"这是原生promise实例，现在开始创建我们自己的promise\"><a href=\"#这是原生promise实例，现在开始创建我们自己的promise\" class=\"headerlink\" title=\"这是原生promise实例，现在开始创建我们自己的promise\"></a>这是原生promise实例，现在开始创建我们自己的promise</h2><h3 id=\"1-首先创建一个新的文件myPromise-js，将其导出，以便引用。其中task为new-Promise-callback-的callback函数\"><a href=\"#1-首先创建一个新的文件myPromise-js，将其导出，以便引用。其中task为new-Promise-callback-的callback函数\" class=\"headerlink\" title=\"1.首先创建一个新的文件myPromise.js，将其导出，以便引用。其中task为new Promise(callback)的callback函数\"></a>1.首先创建一个新的文件myPromise.js，将其导出，以便引用。其中task为new Promise(callback)的callback函数</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myPromise.js</span><br><span class=\"line\"><span class=\"keyword\">function</span> myPromise(task)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module.exports = myPromise</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-在index-js文件中引入我们创建的myPromise，并且生成新实例new-MyPromise\"><a href=\"#2-在index-js文件中引入我们创建的myPromise，并且生成新实例new-MyPromise\" class=\"headerlink\" title=\"2.在index.js文件中引入我们创建的myPromise，并且生成新实例new MyPromise()\"></a>2.在index.js文件中引入我们创建的myPromise，并且生成新实例new MyPromise()</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.js</span><br><span class=\"line\">const MyPromise = require(<span class=\"string\">'./myPromise'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> promiseA = new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> num = Math.random()</span><br><span class=\"line\">    setTimeout(()=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;.5)&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">'大于成功'</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'小于失败'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,2000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">promiseA.then((value)=&gt;&#123;</span><br><span class=\"line\">    console.log(value)</span><br><span class=\"line\">&#125;,(reason)=&gt;&#123;</span><br><span class=\"line\">    console.log(reason)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"在myPromise-js文件中添加如下代码，在这里用self接受this对象，然后给myPromise构造函数添加属性，state代表状态pending-fulfilled和rejected的变化，value和reason分别用来保存myPromise实例resolve和reject传入的值而不是自身构造函数的形参，resolve和reject函数来接收new-myPromise的resolve和reject的参数\"><a href=\"#在myPromise-js文件中添加如下代码，在这里用self接受this对象，然后给myPromise构造函数添加属性，state代表状态pending-fulfilled和rejected的变化，value和reason分别用来保存myPromise实例resolve和reject传入的值而不是自身构造函数的形参，resolve和reject函数来接收new-myPromise的resolve和reject的参数\" class=\"headerlink\" title=\"在myPromise.js文件中添加如下代码，在这里用self接受this对象，然后给myPromise构造函数添加属性，state代表状态pending fulfilled和rejected的变化，value和reason分别用来保存myPromise实例resolve和reject传入的值而不是自身构造函数的形参，resolve和reject函数来接收new myPromise的resolve和reject的参数\"></a>在myPromise.js文件中添加如下代码，在这里用self接受this对象，然后给myPromise构造函数添加属性，state代表状态pending fulfilled和rejected的变化，value和reason分别用来保存myPromise实例resolve和reject传入的值而不是自身构造函数的形参，resolve和reject函数来接收new myPromise的resolve和reject的参数</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myPromise.js</span><br><span class=\"line\"><span class=\"built_in\">let</span> self = this</span><br><span class=\"line\">self.state = <span class=\"string\">'pending'</span></span><br><span class=\"line\">self.value = undefined</span><br><span class=\"line\">self.reason = undefined</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> resolve(value)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> reject(reason)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">try&#123;</span><br><span class=\"line\">    task(resolve,reject)</span><br><span class=\"line\">&#125;catch(error)&#123;</span><br><span class=\"line\">    reject(error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"myPromise构造函数添加onResolvedCallbacks和onRejectedCallbacks-用于临时保存then中函数，当实例resolve和reject的时候以便调用。在resolve函数中，先判断value是否是Promise的实例，如果是，说明resolve返回的是一个promise对象，所以递归value。当resolve或者reject调用的时候分别改变state状态为fulfilled和rejected。当调用then时，如果当前状态为fulfilled成功，则直接返回then的onFulfilled函数向外返回vaule，如果是rejectd状态，则调用onRejected函数，向外返回reason，如果正处于pending等候状态，则分别向onResolvedCallbacks，onRejectedCallbacks添加onFulFilled和onRejected以便resolve和reject调用\"><a href=\"#myPromise构造函数添加onResolvedCallbacks和onRejectedCallbacks-用于临时保存then中函数，当实例resolve和reject的时候以便调用。在resolve函数中，先判断value是否是Promise的实例，如果是，说明resolve返回的是一个promise对象，所以递归value。当resolve或者reject调用的时候分别改变state状态为fulfilled和rejected。当调用then时，如果当前状态为fulfilled成功，则直接返回then的onFulfilled函数向外返回vaule，如果是rejectd状态，则调用onRejected函数，向外返回reason，如果正处于pending等候状态，则分别向onResolvedCallbacks，onRejectedCallbacks添加onFulFilled和onRejected以便resolve和reject调用\" class=\"headerlink\" title=\"myPromise构造函数添加onResolvedCallbacks和onRejectedCallbacks,用于临时保存then中函数，当实例resolve和reject的时候以便调用。在resolve函数中，先判断value是否是Promise的实例，如果是，说明resolve返回的是一个promise对象，所以递归value。当resolve或者reject调用的时候分别改变state状态为fulfilled和rejected。当调用then时，如果当前状态为fulfilled成功，则直接返回then的onFulfilled函数向外返回vaule，如果是rejectd状态，则调用onRejected函数，向外返回reason，如果正处于pending等候状态，则分别向onResolvedCallbacks，onRejectedCallbacks添加onFulFilled和onRejected以便resolve和reject调用\"></a>myPromise构造函数添加onResolvedCallbacks和onRejectedCallbacks,用于临时保存then中函数，当实例resolve和reject的时候以便调用。在resolve函数中，先判断value是否是Promise的实例，如果是，说明resolve返回的是一个promise对象，所以递归value。当resolve或者reject调用的时候分别改变state状态为fulfilled和rejected。当调用then时，如果当前状态为fulfilled成功，则直接返回then的onFulfilled函数向外返回vaule，如果是rejectd状态，则调用onRejected函数，向外返回reason，如果正处于pending等候状态，则分别向onResolvedCallbacks，onRejectedCallbacks添加onFulFilled和onRejected以便resolve和reject调用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myPromise.js</span><br><span class=\"line\"><span class=\"keyword\">function</span> myPromise(task)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> self = this</span><br><span class=\"line\">    self.state = <span class=\"string\">'pending'</span></span><br><span class=\"line\">    self.value = undefined</span><br><span class=\"line\">    self.reason = undefined</span><br><span class=\"line\"></span><br><span class=\"line\">    self.onResolvedCallbacks = []</span><br><span class=\"line\">    self.onRejectedCallbacks = []</span><br><span class=\"line\">    <span class=\"keyword\">function</span> resolve(value)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(value instanceof Promise)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> value.task(resolve,reject)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        setTimeout(()=&gt;&#123;</span><br><span class=\"line\">            self.state = <span class=\"string\">'fulfilled'</span></span><br><span class=\"line\">            self.value = value</span><br><span class=\"line\">            self.onResolvedCallbacks.forEach(item=&gt;item(self.value))    </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> reject(reason)&#123;</span><br><span class=\"line\">        setTimeout(()=&gt;&#123;</span><br><span class=\"line\">            self.state = <span class=\"string\">'rejected'</span></span><br><span class=\"line\">            self.reason = reason</span><br><span class=\"line\">            self.onRejectedCallbacks.forEach(item=&gt;item(self.reason))</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">        task(resolve,reject)</span><br><span class=\"line\">    &#125;catch(error)&#123;</span><br><span class=\"line\">        reject(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myPromise.prototype.then = <span class=\"keyword\">function</span>(onFulFilled,onRejected)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> self = this</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.state == <span class=\"string\">'fulfilled'</span>)&#123;</span><br><span class=\"line\">        onFulFilled(self.value)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(self.state == <span class=\"string\">'rejected'</span>)&#123;</span><br><span class=\"line\">        onRejected(self.reason)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(self.state == <span class=\"string\">'pending'</span>)&#123;</span><br><span class=\"line\">        self.onResolvedCallbacks.push(onFulFilled)</span><br><span class=\"line\">        self.onRejectedCallbacks.push(onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"现在改动一下index-js文件如下，在Promise的then方法上实现链式调用，也就是说第一个then返回的是一个promise对象，然后在调用then\"><a href=\"#现在改动一下index-js文件如下，在Promise的then方法上实现链式调用，也就是说第一个then返回的是一个promise对象，然后在调用then\" class=\"headerlink\" title=\"现在改动一下index.js文件如下，在Promise的then方法上实现链式调用，也就是说第一个then返回的是一个promise对象，然后在调用then\"></a>现在改动一下index.js文件如下，在Promise的then方法上实现链式调用，也就是说第一个then返回的是一个promise对象，然后在调用then</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.js</span><br><span class=\"line\">const MyPromise = require(<span class=\"string\">'./myPromise'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> promiseA = new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> num = Math.random()</span><br><span class=\"line\">    setTimeout(()=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;.5)&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">'大于成功'</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'小于失败'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,2000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">promiseA.then((value)=&gt;&#123;</span><br><span class=\"line\">    console.log(`我是value： <span class=\"variable\">$&#123;value&#125;</span>`)</span><br><span class=\"line\">    <span class=\"built_in\">return</span> new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">        resolve(value)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,(reason)=&gt;&#123;</span><br><span class=\"line\">    console.log(reason)</span><br><span class=\"line\">&#125;).<span class=\"keyword\">then</span>((data)=&gt;&#123;</span><br><span class=\"line\">    console.log(`我是data： <span class=\"variable\">$&#123;data&#125;</span>`)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"来让我们看一下myPromise-js这个文件-myPromise构造函数不做改动，先说一下then方法的改变，根据promise-A-协议，then必须返回一个promise对象，所以创建promise2，让then最终返回的是一个promise对象，在promise2中构建myPromise实例用法就是将task函数展现出来，根据协议说Promise解析过程-是以一个promise和一个值做为参数的抽象过程，可表示为-Resolve-，所以重新封装一个函数resolvePromise接收promise2，x-协议：onFulfilled-或-onRejected-返回了值x-则执行Promise-解析流程-Resolve-），resolve-reject封装函数调用-在其中先判断onFulFilled和onRejected是否是函数如果不是则直接返回接收值\"><a href=\"#来让我们看一下myPromise-js这个文件-myPromise构造函数不做改动，先说一下then方法的改变，根据promise-A-协议，then必须返回一个promise对象，所以创建promise2，让then最终返回的是一个promise对象，在promise2中构建myPromise实例用法就是将task函数展现出来，根据协议说Promise解析过程-是以一个promise和一个值做为参数的抽象过程，可表示为-Resolve-，所以重新封装一个函数resolvePromise接收promise2，x-协议：onFulfilled-或-onRejected-返回了值x-则执行Promise-解析流程-Resolve-），resolve-reject封装函数调用-在其中先判断onFulFilled和onRejected是否是函数如果不是则直接返回接收值\" class=\"headerlink\" title=\"来让我们看一下myPromise.js这个文件,myPromise构造函数不做改动，先说一下then方法的改变，根据promise/A+协议，then必须返回一个promise对象，所以创建promise2，让then最终返回的是一个promise对象，在promise2中构建myPromise实例用法就是将task函数展现出来，根据协议说Promise解析过程 是以一个promise和一个值做为参数的抽象过程，可表示为[Resolve]，所以重新封装一个函数resolvePromise接收promise2，x(协议：onFulfilled 或 onRejected 返回了值x, 则执行Promise 解析流程[Resolve]），resolve,reject封装函数调用,在其中先判断onFulFilled和onRejected是否是函数如果不是则直接返回接收值\"></a>来让我们看一下myPromise.js这个文件,myPromise构造函数不做改动，先说一下then方法的改变，根据promise/A+协议，then必须返回一个promise对象，所以创建promise2，让then最终返回的是一个promise对象，在promise2中构建myPromise实例用法就是将task函数展现出来，根据协议说Promise解析过程 是以一个promise和一个值做为参数的抽象过程，可表示为<a href=\"promise, x\">[Resolve]</a>，所以重新封装一个函数resolvePromise接收promise2，x(协议：onFulfilled 或 onRejected 返回了值x, 则执行Promise 解析流程<a href=\"promise2, x\">[Resolve]</a>），resolve,reject封装函数调用,在其中先判断onFulFilled和onRejected是否是函数如果不是则直接返回接收值</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myPromise.js</span><br><span class=\"line\"><span class=\"keyword\">function</span> resolvePromise(promise2,x,resolve,reject)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">myPromise.prototype.then = <span class=\"keyword\">function</span>(onFulFilled,onRejected)&#123;</span><br><span class=\"line\">    onFulFilled = typeof onFulFilled === <span class=\"string\">'function'</span>?onFulFilled:value=&gt;value</span><br><span class=\"line\">    onRejected = typeof onRejected === <span class=\"string\">'function'</span>?onRejected:reason=&gt;&#123;throw reason&#125;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> self = this</span><br><span class=\"line\">    <span class=\"built_in\">let</span> promise2</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(self.state == <span class=\"string\">'fulfilled'</span>)&#123;</span><br><span class=\"line\">        promise2 = new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                <span class=\"built_in\">let</span> x = onFulFilled(self.value)</span><br><span class=\"line\">                resolvePromise(promise2,x,resolve,reject)</span><br><span class=\"line\">            &#125; catch (error) &#123;</span><br><span class=\"line\">                reject(err)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(self.state == <span class=\"string\">'rejected'</span>)&#123;</span><br><span class=\"line\">        promise2 = new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                <span class=\"built_in\">let</span> x = onRejected(self.reason)</span><br><span class=\"line\">                resolvePromise(promise2,x,resolve,reject)</span><br><span class=\"line\">            &#125; catch (error) &#123;</span><br><span class=\"line\">                reject(error)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(self.state == <span class=\"string\">'pending'</span>)&#123;</span><br><span class=\"line\">        promise2 = new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">            self.onResolvedCallbacks.push((value)=&gt;&#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">let</span> x = onFulFilled(value)</span><br><span class=\"line\">                    resolvePromise(promise2,x,resolve,reject)</span><br><span class=\"line\">                &#125; catch (error) &#123;</span><br><span class=\"line\">                    reject(error)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            self.onRejectedCallbacks.push((reason)=&gt;&#123;</span><br><span class=\"line\">                try &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">let</span> x = onRejected(reason)</span><br><span class=\"line\">                    resolvePromise(promise2,x,resolve,reject)</span><br><span class=\"line\">                &#125; catch (error) &#123;</span><br><span class=\"line\">                    reject(error)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> promise2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"让我们来看一下resolvePromise这个函数，根据协议先判断是否是重复调用，然后定义then，called变量，根据协议判断x是否是对象还是函数，如果是字符串直接resolve，根据协议（如果在取x-then值时抛出了异常，则以这个异常做为原因将promise拒绝。）try-catch，然后让then等于x-then-判断then是否是函数，如果是则说明他是一个promise对象，不是则只是一个普通对象，直接resolve。让then的this指向x，根据协议（当-resolvePromise-被以-y为参数调用-执行-Resolve-）则递归resolvePromise。根据协议，当resolvePromise和rejectPromise同时调用或者调用多次，则忽略后面的，所以用called阻止多次调用\"><a href=\"#让我们来看一下resolvePromise这个函数，根据协议先判断是否是重复调用，然后定义then，called变量，根据协议判断x是否是对象还是函数，如果是字符串直接resolve，根据协议（如果在取x-then值时抛出了异常，则以这个异常做为原因将promise拒绝。）try-catch，然后让then等于x-then-判断then是否是函数，如果是则说明他是一个promise对象，不是则只是一个普通对象，直接resolve。让then的this指向x，根据协议（当-resolvePromise-被以-y为参数调用-执行-Resolve-）则递归resolvePromise。根据协议，当resolvePromise和rejectPromise同时调用或者调用多次，则忽略后面的，所以用called阻止多次调用\" class=\"headerlink\" title=\"让我们来看一下resolvePromise这个函数，根据协议先判断是否是重复调用，然后定义then，called变量，根据协议判断x是否是对象还是函数，如果是字符串直接resolve，根据协议（如果在取x.then值时抛出了异常，则以这个异常做为原因将promise拒绝。）try/catch，然后让then等于x.then 判断then是否是函数，如果是则说明他是一个promise对象，不是则只是一个普通对象，直接resolve。让then的this指向x，根据协议（当 resolvePromise 被以 y为参数调用, 执行 [Resolve]）则递归resolvePromise。根据协议，当resolvePromise和rejectPromise同时调用或者调用多次，则忽略后面的，所以用called阻止多次调用\"></a>让我们来看一下resolvePromise这个函数，根据协议先判断是否是重复调用，然后定义then，called变量，根据协议判断x是否是对象还是函数，如果是字符串直接resolve，根据协议（如果在取x.then值时抛出了异常，则以这个异常做为原因将promise拒绝。）try/catch，然后让then等于x.then 判断then是否是函数，如果是则说明他是一个promise对象，不是则只是一个普通对象，直接resolve。让then的this指向x，根据协议（当 resolvePromise 被以 y为参数调用, 执行 <a href=\"promise, y\">[Resolve]</a>）则递归resolvePromise。根据协议，当resolvePromise和rejectPromise同时调用或者调用多次，则忽略后面的，所以用called阻止多次调用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myPromise.js</span><br><span class=\"line\"><span class=\"keyword\">function</span> resolvePromise(promise2,x,resolve,reject)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(promise2 === x)reject(new TypeError(<span class=\"string\">'重复调用'</span>))</span><br><span class=\"line\">    <span class=\"built_in\">let</span> <span class=\"keyword\">then</span>,called</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x !=null &amp;&amp;(typeof x === <span class=\"string\">'function'</span> || typeof x === <span class=\"string\">'object'</span>))&#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            <span class=\"keyword\">then</span> = x.then</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(typeof <span class=\"keyword\">then</span> === <span class=\"string\">'function'</span>)&#123;</span><br><span class=\"line\">                then.call(x,<span class=\"keyword\">function</span>(y)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(called)<span class=\"built_in\">return</span></span><br><span class=\"line\">                    called = <span class=\"literal\">true</span></span><br><span class=\"line\">                    resolvePromise(promise2,y,resolve,reject)</span><br><span class=\"line\">                &#125;,<span class=\"keyword\">function</span>(err)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(called)<span class=\"built_in\">return</span></span><br><span class=\"line\">                    called = <span class=\"literal\">true</span></span><br><span class=\"line\">                    reject(err)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                resolve(x)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (error) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(called)<span class=\"built_in\">return</span></span><br><span class=\"line\">            called = <span class=\"literal\">true</span></span><br><span class=\"line\">            reject(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        resolve(x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"下面是myPromise-all方法\"><a href=\"#下面是myPromise-all方法\" class=\"headerlink\" title=\"下面是myPromise.all方法\"></a>下面是myPromise.all方法</h2><h3 id=\"index-js改动如下-两个myPromise实例-分别异步时间不同\"><a href=\"#index-js改动如下-两个myPromise实例-分别异步时间不同\" class=\"headerlink\" title=\"index.js改动如下 两个myPromise实例 分别异步时间不同\"></a>index.js改动如下 两个myPromise实例 分别异步时间不同</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.js</span><br><span class=\"line\">const MyPromise = require(<span class=\"string\">'./myPromise'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> promiseA = new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> num = Math.random()</span><br><span class=\"line\">    setTimeout(()=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;.5)&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">'大于成功A'</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'小于失败A'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,2000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">let</span> promiseB = new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> num = Math.random()</span><br><span class=\"line\">    setTimeout(()=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;.5)&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">'大于成功B'</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'小于失败B'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,3000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">MyPromise.all([promiseA,promiseB]).<span class=\"keyword\">then</span>((value)=&gt;&#123;</span><br><span class=\"line\">    console.log(`我是value1： <span class=\"variable\">$&#123;value[0]&#125;</span>`)</span><br><span class=\"line\">    console.log(`我是value2： <span class=\"variable\">$&#123;value[1]&#125;</span>`)</span><br><span class=\"line\">&#125;,(reason)=&gt;&#123;</span><br><span class=\"line\">    console.log(`我是reason： <span class=\"variable\">$&#123;reason&#125;</span>`)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"myPromise-js文件添加如下代码，在myPromise自身设置一个all方法，传入进入的是一个数组promises，返回的也是一个promise对象，用result保存多个promise返回的值，循环promises分别调用then方法，当i-primises-lenght-1时并且called为true时-就是说明所有promise都执行完毕并且没有报错，则直接resolve这个result数组结果，只要一个报错，直接reject\"><a href=\"#myPromise-js文件添加如下代码，在myPromise自身设置一个all方法，传入进入的是一个数组promises，返回的也是一个promise对象，用result保存多个promise返回的值，循环promises分别调用then方法，当i-primises-lenght-1时并且called为true时-就是说明所有promise都执行完毕并且没有报错，则直接resolve这个result数组结果，只要一个报错，直接reject\" class=\"headerlink\" title=\"myPromise.js文件添加如下代码，在myPromise自身设置一个all方法，传入进入的是一个数组promises，返回的也是一个promise对象，用result保存多个promise返回的值，循环promises分别调用then方法，当i===primises.lenght-1时并且called为true时,就是说明所有promise都执行完毕并且没有报错，则直接resolve这个result数组结果，只要一个报错，直接reject\"></a>myPromise.js文件添加如下代码，在myPromise自身设置一个all方法，传入进入的是一个数组promises，返回的也是一个promise对象，用result保存多个promise返回的值，循环promises分别调用then方法，当i===primises.lenght-1时并且called为true时,就是说明所有promise都执行完毕并且没有报错，则直接resolve这个result数组结果，只要一个报错，直接reject</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myPromise.js</span><br><span class=\"line\">myPromise.all = <span class=\"keyword\">function</span>(promises)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> new myPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> result = []</span><br><span class=\"line\">        <span class=\"built_in\">let</span> called = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> i=0;i&lt;promises.length;i++)&#123;</span><br><span class=\"line\">            promises[i].<span class=\"keyword\">then</span>((value)=&gt;&#123;</span><br><span class=\"line\">                result[i] = value</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i=== promises.length-1 &amp;&amp; called)&#123;</span><br><span class=\"line\">                    resolve(result)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,(reason)=&gt;&#123;</span><br><span class=\"line\">                called = <span class=\"literal\">false</span></span><br><span class=\"line\">                reject(reason)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"下面是myPromise-race方法\"><a href=\"#下面是myPromise-race方法\" class=\"headerlink\" title=\"下面是myPromise.race方法\"></a>下面是myPromise.race方法</h2><h3 id=\"和all方法的index-js差别在让promiseB时间短，好看出B能在A前一步执行完\"><a href=\"#和all方法的index-js差别在让promiseB时间短，好看出B能在A前一步执行完\" class=\"headerlink\" title=\"和all方法的index.js差别在让promiseB时间短，好看出B能在A前一步执行完\"></a>和all方法的index.js差别在让promiseB时间短，好看出B能在A前一步执行完</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index.js</span><br><span class=\"line\">const MyPromise = require(<span class=\"string\">'./myPromise'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">let</span> promiseA = new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> num = Math.random()</span><br><span class=\"line\">    setTimeout(()=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;.5)&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">'大于成功A'</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'小于失败A'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,2000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">let</span> promiseB = new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"built_in\">let</span> num = Math.random()</span><br><span class=\"line\">    setTimeout(()=&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&gt;.5)&#123;</span><br><span class=\"line\">            resolve(<span class=\"string\">'大于成功B'</span>)</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"string\">'小于失败B'</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,1000)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">MyPromise.race([promiseA,promiseB]).<span class=\"keyword\">then</span>((value)=&gt;&#123;</span><br><span class=\"line\">    console.log(`我是value： <span class=\"variable\">$&#123;value&#125;</span>`)</span><br><span class=\"line\">&#125;,(reason)=&gt;&#123;</span><br><span class=\"line\">    console.log(`我是reason： <span class=\"variable\">$&#123;reason&#125;</span>`)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"myPromise文件给MyPromise添加静态方法race，和all相似，不过在调用promise的then方法时，让数组保存临时值，判断当数组length为1时，则直接执行resolve或者reject\"><a href=\"#myPromise文件给MyPromise添加静态方法race，和all相似，不过在调用promise的then方法时，让数组保存临时值，判断当数组length为1时，则直接执行resolve或者reject\" class=\"headerlink\" title=\"myPromise文件给MyPromise添加静态方法race，和all相似，不过在调用promise的then方法时，让数组保存临时值，判断当数组length为1时，则直接执行resolve或者reject\"></a>myPromise文件给MyPromise添加静态方法race，和all相似，不过在调用promise的then方法时，让数组保存临时值，判断当数组length为1时，则直接执行resolve或者reject</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myPromise.js</span><br><span class=\"line\">MyPromise.race = <span class=\"keyword\">function</span>(promises)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> new MyPromise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">        <span class=\"built_in\">let</span> result = []</span><br><span class=\"line\">        promises.forEach(promise=&gt;&#123;</span><br><span class=\"line\">            promise.then((value)=&gt;&#123;</span><br><span class=\"line\">                result.push(value)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result.length == 1)&#123;</span><br><span class=\"line\">                    resolve(value)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,(reason)=&gt;&#123;</span><br><span class=\"line\">                result.push(reason)</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result.length == 1)&#123;</span><br><span class=\"line\">                    reject(reason)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"mongodb 云端Linux安装","date":"2018-01-06T16:00:00.000Z","_content":"\n###### 如何在阿里云服务器Linux环境下安装mongodb，使用mongohub视图工具操作\n\n## 官网下载安装包,选择版本按照服务器版本选择，这里选择Ubuntu16.04版本\nhttps://www.mongodb.com/download-center#community\n## 将下载好的压缩包传到服务器上,在mac电脑因为是linux环境 所以用scp传输 Downloads是本机mongodb压缩包地址，Ip后:/代表传输到服务器根目录\n``` bash\nscp Downloads/mongodb-linux-x86_64-ubuntu1604-3.6.1.tgz 服务器用户名@4服务器IP:/\n```\n### 进行解压，因为本下载压缩包格式是tgz格式 所以用tar命令解压\n``` bash\ntar -zxvf mongodb-linux-x86_64-ubuntu1604-3.6.1.tg\n```\n### 创建文件夹mongodb\n``` bash\nmkdir mongodb\n```\n### 将解压好的文件移入mongodb文件夹内\n``` bash\nmv mongodb\n```\n### 在mongodb文件夹内创建data文件夹存放db文件 创建logos文件夹存放log文件,并且在logs文件夹内创建mongodb.log文件\n``` bash\nmkdir data\nmkdir logs\ncd logs/\ntouch mongodb.lo\n```\n### 在mongodb跟目录在创建etc配置文件夹\n``` bash\nmkdir etc\n```\n### 在etc中创建配置文件mongo.conf\n``` bash\ndbpath=/mongodb/data/\nlogpath=/mongodb/logs/mongodb.log\nlogappend=true //代表日志追加 不会覆盖\nquiet=true //默认是true表示在调试时会过滤日志，如果不想在调试时过滤日志可false\nport=27017 //指定端口\n```\n### 切换目录到mongodb->mongo安装文件夹->bin目录 指定mongo配置指向，并启动mongod\n``` bash\nmongod -f /mongodb/etc/mongo.conf\n```\n### 服务器防火墙添加27017端口规则\n### 在mac中打开mongohub视图工具，添加数据库，按需求是否设置过集合用户名密码，没有则不填写，选择服务器创建的Database或者为空代表整个mongodb数据库\n![](/mongo-install-linux/mongohub.png)\n","source":"_posts/mongodb/mongo-install-linux.md","raw":"---\ntitle: mongodb 云端Linux安装\ndate: 2018/01/07\ncategories:\n- Mongodb\ntags:\n- mongodb\n- mongo\n- Mongodb\n- Mongo\n- linux\n- Linux\n---\n\n###### 如何在阿里云服务器Linux环境下安装mongodb，使用mongohub视图工具操作\n\n## 官网下载安装包,选择版本按照服务器版本选择，这里选择Ubuntu16.04版本\nhttps://www.mongodb.com/download-center#community\n## 将下载好的压缩包传到服务器上,在mac电脑因为是linux环境 所以用scp传输 Downloads是本机mongodb压缩包地址，Ip后:/代表传输到服务器根目录\n``` bash\nscp Downloads/mongodb-linux-x86_64-ubuntu1604-3.6.1.tgz 服务器用户名@4服务器IP:/\n```\n### 进行解压，因为本下载压缩包格式是tgz格式 所以用tar命令解压\n``` bash\ntar -zxvf mongodb-linux-x86_64-ubuntu1604-3.6.1.tg\n```\n### 创建文件夹mongodb\n``` bash\nmkdir mongodb\n```\n### 将解压好的文件移入mongodb文件夹内\n``` bash\nmv mongodb\n```\n### 在mongodb文件夹内创建data文件夹存放db文件 创建logos文件夹存放log文件,并且在logs文件夹内创建mongodb.log文件\n``` bash\nmkdir data\nmkdir logs\ncd logs/\ntouch mongodb.lo\n```\n### 在mongodb跟目录在创建etc配置文件夹\n``` bash\nmkdir etc\n```\n### 在etc中创建配置文件mongo.conf\n``` bash\ndbpath=/mongodb/data/\nlogpath=/mongodb/logs/mongodb.log\nlogappend=true //代表日志追加 不会覆盖\nquiet=true //默认是true表示在调试时会过滤日志，如果不想在调试时过滤日志可false\nport=27017 //指定端口\n```\n### 切换目录到mongodb->mongo安装文件夹->bin目录 指定mongo配置指向，并启动mongod\n``` bash\nmongod -f /mongodb/etc/mongo.conf\n```\n### 服务器防火墙添加27017端口规则\n### 在mac中打开mongohub视图工具，添加数据库，按需求是否设置过集合用户名密码，没有则不填写，选择服务器创建的Database或者为空代表整个mongodb数据库\n![](/mongo-install-linux/mongohub.png)\n","slug":"mongodb/mongo-install-linux","published":1,"updated":"2018-01-18T01:23:40.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcjtejfr0006x8xbt7y0lx78","content":"<h6 id=\"如何在阿里云服务器Linux环境下安装mongodb，使用mongohub视图工具操作\"><a href=\"#如何在阿里云服务器Linux环境下安装mongodb，使用mongohub视图工具操作\" class=\"headerlink\" title=\"如何在阿里云服务器Linux环境下安装mongodb，使用mongohub视图工具操作\"></a>如何在阿里云服务器Linux环境下安装mongodb，使用mongohub视图工具操作</h6><h2 id=\"官网下载安装包-选择版本按照服务器版本选择，这里选择Ubuntu16-04版本\"><a href=\"#官网下载安装包-选择版本按照服务器版本选择，这里选择Ubuntu16-04版本\" class=\"headerlink\" title=\"官网下载安装包,选择版本按照服务器版本选择，这里选择Ubuntu16.04版本\"></a>官网下载安装包,选择版本按照服务器版本选择，这里选择Ubuntu16.04版本</h2><p><a href=\"https://www.mongodb.com/download-center#community\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/download-center#community</a></p>\n<h2 id=\"将下载好的压缩包传到服务器上-在mac电脑因为是linux环境-所以用scp传输-Downloads是本机mongodb压缩包地址，Ip后-代表传输到服务器根目录\"><a href=\"#将下载好的压缩包传到服务器上-在mac电脑因为是linux环境-所以用scp传输-Downloads是本机mongodb压缩包地址，Ip后-代表传输到服务器根目录\" class=\"headerlink\" title=\"将下载好的压缩包传到服务器上,在mac电脑因为是linux环境 所以用scp传输 Downloads是本机mongodb压缩包地址，Ip后:/代表传输到服务器根目录\"></a>将下载好的压缩包传到服务器上,在mac电脑因为是linux环境 所以用scp传输 Downloads是本机mongodb压缩包地址，Ip后:/代表传输到服务器根目录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp Downloads/mongodb-linux-x86_64-ubuntu1604-3.6.1.tgz 服务器用户名@4服务器IP:/</span><br></pre></td></tr></table></figure>\n<h3 id=\"进行解压，因为本下载压缩包格式是tgz格式-所以用tar命令解压\"><a href=\"#进行解压，因为本下载压缩包格式是tgz格式-所以用tar命令解压\" class=\"headerlink\" title=\"进行解压，因为本下载压缩包格式是tgz格式 所以用tar命令解压\"></a>进行解压，因为本下载压缩包格式是tgz格式 所以用tar命令解压</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf mongodb-linux-x86_64-ubuntu1604-3.6.1.tg</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建文件夹mongodb\"><a href=\"#创建文件夹mongodb\" class=\"headerlink\" title=\"创建文件夹mongodb\"></a>创建文件夹mongodb</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir mongodb</span><br></pre></td></tr></table></figure>\n<h3 id=\"将解压好的文件移入mongodb文件夹内\"><a href=\"#将解压好的文件移入mongodb文件夹内\" class=\"headerlink\" title=\"将解压好的文件移入mongodb文件夹内\"></a>将解压好的文件移入mongodb文件夹内</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv mongodb</span><br></pre></td></tr></table></figure>\n<h3 id=\"在mongodb文件夹内创建data文件夹存放db文件-创建logos文件夹存放log文件-并且在logs文件夹内创建mongodb-log文件\"><a href=\"#在mongodb文件夹内创建data文件夹存放db文件-创建logos文件夹存放log文件-并且在logs文件夹内创建mongodb-log文件\" class=\"headerlink\" title=\"在mongodb文件夹内创建data文件夹存放db文件 创建logos文件夹存放log文件,并且在logs文件夹内创建mongodb.log文件\"></a>在mongodb文件夹内创建data文件夹存放db文件 创建logos文件夹存放log文件,并且在logs文件夹内创建mongodb.log文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir data</span><br><span class=\"line\">mkdir logs</span><br><span class=\"line\"><span class=\"built_in\">cd</span> logs/</span><br><span class=\"line\">touch mongodb.lo</span><br></pre></td></tr></table></figure>\n<h3 id=\"在mongodb跟目录在创建etc配置文件夹\"><a href=\"#在mongodb跟目录在创建etc配置文件夹\" class=\"headerlink\" title=\"在mongodb跟目录在创建etc配置文件夹\"></a>在mongodb跟目录在创建etc配置文件夹</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir etc</span><br></pre></td></tr></table></figure>\n<h3 id=\"在etc中创建配置文件mongo-conf\"><a href=\"#在etc中创建配置文件mongo-conf\" class=\"headerlink\" title=\"在etc中创建配置文件mongo.conf\"></a>在etc中创建配置文件mongo.conf</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbpath=/mongodb/data/</span><br><span class=\"line\">logpath=/mongodb/logs/mongodb.log</span><br><span class=\"line\">logappend=<span class=\"literal\">true</span> //代表日志追加 不会覆盖</span><br><span class=\"line\">quiet=<span class=\"literal\">true</span> //默认是<span class=\"literal\">true</span>表示在调试时会过滤日志，如果不想在调试时过滤日志可<span class=\"literal\">false</span></span><br><span class=\"line\">port=27017 //指定端口</span><br></pre></td></tr></table></figure>\n<h3 id=\"切换目录到mongodb-gt-mongo安装文件夹-gt-bin目录-指定mongo配置指向，并启动mongod\"><a href=\"#切换目录到mongodb-gt-mongo安装文件夹-gt-bin目录-指定mongo配置指向，并启动mongod\" class=\"headerlink\" title=\"切换目录到mongodb-&gt;mongo安装文件夹-&gt;bin目录 指定mongo配置指向，并启动mongod\"></a>切换目录到mongodb-&gt;mongo安装文件夹-&gt;bin目录 指定mongo配置指向，并启动mongod</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod -f /mongodb/etc/mongo.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务器防火墙添加27017端口规则\"><a href=\"#服务器防火墙添加27017端口规则\" class=\"headerlink\" title=\"服务器防火墙添加27017端口规则\"></a>服务器防火墙添加27017端口规则</h3><h3 id=\"在mac中打开mongohub视图工具，添加数据库，按需求是否设置过集合用户名密码，没有则不填写，选择服务器创建的Database或者为空代表整个mongodb数据库\"><a href=\"#在mac中打开mongohub视图工具，添加数据库，按需求是否设置过集合用户名密码，没有则不填写，选择服务器创建的Database或者为空代表整个mongodb数据库\" class=\"headerlink\" title=\"在mac中打开mongohub视图工具，添加数据库，按需求是否设置过集合用户名密码，没有则不填写，选择服务器创建的Database或者为空代表整个mongodb数据库\"></a>在mac中打开mongohub视图工具，添加数据库，按需求是否设置过集合用户名密码，没有则不填写，选择服务器创建的Database或者为空代表整个mongodb数据库</h3><p><img src=\"/mongo-install-linux/mongohub.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"如何在阿里云服务器Linux环境下安装mongodb，使用mongohub视图工具操作\"><a href=\"#如何在阿里云服务器Linux环境下安装mongodb，使用mongohub视图工具操作\" class=\"headerlink\" title=\"如何在阿里云服务器Linux环境下安装mongodb，使用mongohub视图工具操作\"></a>如何在阿里云服务器Linux环境下安装mongodb，使用mongohub视图工具操作</h6><h2 id=\"官网下载安装包-选择版本按照服务器版本选择，这里选择Ubuntu16-04版本\"><a href=\"#官网下载安装包-选择版本按照服务器版本选择，这里选择Ubuntu16-04版本\" class=\"headerlink\" title=\"官网下载安装包,选择版本按照服务器版本选择，这里选择Ubuntu16.04版本\"></a>官网下载安装包,选择版本按照服务器版本选择，这里选择Ubuntu16.04版本</h2><p><a href=\"https://www.mongodb.com/download-center#community\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/download-center#community</a></p>\n<h2 id=\"将下载好的压缩包传到服务器上-在mac电脑因为是linux环境-所以用scp传输-Downloads是本机mongodb压缩包地址，Ip后-代表传输到服务器根目录\"><a href=\"#将下载好的压缩包传到服务器上-在mac电脑因为是linux环境-所以用scp传输-Downloads是本机mongodb压缩包地址，Ip后-代表传输到服务器根目录\" class=\"headerlink\" title=\"将下载好的压缩包传到服务器上,在mac电脑因为是linux环境 所以用scp传输 Downloads是本机mongodb压缩包地址，Ip后:/代表传输到服务器根目录\"></a>将下载好的压缩包传到服务器上,在mac电脑因为是linux环境 所以用scp传输 Downloads是本机mongodb压缩包地址，Ip后:/代表传输到服务器根目录</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp Downloads/mongodb-linux-x86_64-ubuntu1604-3.6.1.tgz 服务器用户名@4服务器IP:/</span><br></pre></td></tr></table></figure>\n<h3 id=\"进行解压，因为本下载压缩包格式是tgz格式-所以用tar命令解压\"><a href=\"#进行解压，因为本下载压缩包格式是tgz格式-所以用tar命令解压\" class=\"headerlink\" title=\"进行解压，因为本下载压缩包格式是tgz格式 所以用tar命令解压\"></a>进行解压，因为本下载压缩包格式是tgz格式 所以用tar命令解压</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf mongodb-linux-x86_64-ubuntu1604-3.6.1.tg</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建文件夹mongodb\"><a href=\"#创建文件夹mongodb\" class=\"headerlink\" title=\"创建文件夹mongodb\"></a>创建文件夹mongodb</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir mongodb</span><br></pre></td></tr></table></figure>\n<h3 id=\"将解压好的文件移入mongodb文件夹内\"><a href=\"#将解压好的文件移入mongodb文件夹内\" class=\"headerlink\" title=\"将解压好的文件移入mongodb文件夹内\"></a>将解压好的文件移入mongodb文件夹内</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv mongodb</span><br></pre></td></tr></table></figure>\n<h3 id=\"在mongodb文件夹内创建data文件夹存放db文件-创建logos文件夹存放log文件-并且在logs文件夹内创建mongodb-log文件\"><a href=\"#在mongodb文件夹内创建data文件夹存放db文件-创建logos文件夹存放log文件-并且在logs文件夹内创建mongodb-log文件\" class=\"headerlink\" title=\"在mongodb文件夹内创建data文件夹存放db文件 创建logos文件夹存放log文件,并且在logs文件夹内创建mongodb.log文件\"></a>在mongodb文件夹内创建data文件夹存放db文件 创建logos文件夹存放log文件,并且在logs文件夹内创建mongodb.log文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir data</span><br><span class=\"line\">mkdir logs</span><br><span class=\"line\"><span class=\"built_in\">cd</span> logs/</span><br><span class=\"line\">touch mongodb.lo</span><br></pre></td></tr></table></figure>\n<h3 id=\"在mongodb跟目录在创建etc配置文件夹\"><a href=\"#在mongodb跟目录在创建etc配置文件夹\" class=\"headerlink\" title=\"在mongodb跟目录在创建etc配置文件夹\"></a>在mongodb跟目录在创建etc配置文件夹</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir etc</span><br></pre></td></tr></table></figure>\n<h3 id=\"在etc中创建配置文件mongo-conf\"><a href=\"#在etc中创建配置文件mongo-conf\" class=\"headerlink\" title=\"在etc中创建配置文件mongo.conf\"></a>在etc中创建配置文件mongo.conf</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbpath=/mongodb/data/</span><br><span class=\"line\">logpath=/mongodb/logs/mongodb.log</span><br><span class=\"line\">logappend=<span class=\"literal\">true</span> //代表日志追加 不会覆盖</span><br><span class=\"line\">quiet=<span class=\"literal\">true</span> //默认是<span class=\"literal\">true</span>表示在调试时会过滤日志，如果不想在调试时过滤日志可<span class=\"literal\">false</span></span><br><span class=\"line\">port=27017 //指定端口</span><br></pre></td></tr></table></figure>\n<h3 id=\"切换目录到mongodb-gt-mongo安装文件夹-gt-bin目录-指定mongo配置指向，并启动mongod\"><a href=\"#切换目录到mongodb-gt-mongo安装文件夹-gt-bin目录-指定mongo配置指向，并启动mongod\" class=\"headerlink\" title=\"切换目录到mongodb-&gt;mongo安装文件夹-&gt;bin目录 指定mongo配置指向，并启动mongod\"></a>切换目录到mongodb-&gt;mongo安装文件夹-&gt;bin目录 指定mongo配置指向，并启动mongod</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod -f /mongodb/etc/mongo.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务器防火墙添加27017端口规则\"><a href=\"#服务器防火墙添加27017端口规则\" class=\"headerlink\" title=\"服务器防火墙添加27017端口规则\"></a>服务器防火墙添加27017端口规则</h3><h3 id=\"在mac中打开mongohub视图工具，添加数据库，按需求是否设置过集合用户名密码，没有则不填写，选择服务器创建的Database或者为空代表整个mongodb数据库\"><a href=\"#在mac中打开mongohub视图工具，添加数据库，按需求是否设置过集合用户名密码，没有则不填写，选择服务器创建的Database或者为空代表整个mongodb数据库\" class=\"headerlink\" title=\"在mac中打开mongohub视图工具，添加数据库，按需求是否设置过集合用户名密码，没有则不填写，选择服务器创建的Database或者为空代表整个mongodb数据库\"></a>在mac中打开mongohub视图工具，添加数据库，按需求是否设置过集合用户名密码，没有则不填写，选择服务器创建的Database或者为空代表整个mongodb数据库</h3><p><img src=\"/mongo-install-linux/mongohub.png\" alt=\"\"></p>\n"},{"title":"Mongodb Mac安装","date":"2018-01-05T16:00:00.000Z","type":"mongodb","_content":"\n######Mongodb Mac安装主要采Homebrew,然后通过Homebrew 安装mongodb，然后创建数据写入目录data/db，给添加权限给data，最后启动mongod\n\n## Homebrew安装\n### 执行以下命令，等待安装完毕\n``` bash\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n具体其他使用方法可去官网查看\n\n### 如果已经安装Homebrew下面提供一些常用命令\n##### 1.更新brew本身\n``` bash\nbrew update\n```\n##### 2.安装软件\n``` bash\nbrew install 软件标志\n```\n##### 3.卸载软件\n``` bash\nbrew uninstall 软件标志名\n```\n##### 4.显示使用brew安装软件列表\n``` bash\nbrew list\n```\n##### 5.更新软件\n``` bash\nbrew upgrade 软件标志名（不写则默认所有使用brew安装的软件\n```  \n##### 6.查看需要升级软件\n``` bash\nbrew outdated\n```\n##### 7.查找需要软件\n``` bash\nbrew search\n```\n##### 8.查看brew安装的软件，所在位置\n``` bash\nbrew --cache\n```\n\n## mongodb安装\n### 执行以下命令\n``` bash\nbrew install mongodb\n```\n### 安装成功后再启动前创建数据写入目录\n##### 1.切换根目录\n``` bash\ncd /\n```\n##### 2.创建数据写入目录 参数-p作用需要时创建上层目录，如果存在忽略创建子目录,如创建失败可能涉及权限问题加sudo\n``` bash\nmkdir -p data/db\n```\n### 给数据写入目录添加可读可写权限\n##### 1.切换根目录\n``` bash\ncd /\n```\n##### 2.添加权限 -R参数表示递归\n``` bash\nsudo chown -R 用户名 data/db\n```\n### 启动mongodb\n##### 1.启动mongodb server\n``` bash\nmongod\n```\n##### 2.连接数据库,做数据库操作\n``` bash\nmongo\n```\n","source":"_posts/mongodb/mongo-install-mac.md","raw":"---\ntitle: Mongodb Mac安装\ndate: 2018/01/06\ntype: mongodb\ncategories:\n- Mongodb\ntags:\n- mongodb\n- mongo\n- Mongodb\n- Mongo\n- mac\n- Mac\n---\n\n######Mongodb Mac安装主要采Homebrew,然后通过Homebrew 安装mongodb，然后创建数据写入目录data/db，给添加权限给data，最后启动mongod\n\n## Homebrew安装\n### 执行以下命令，等待安装完毕\n``` bash\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n具体其他使用方法可去官网查看\n\n### 如果已经安装Homebrew下面提供一些常用命令\n##### 1.更新brew本身\n``` bash\nbrew update\n```\n##### 2.安装软件\n``` bash\nbrew install 软件标志\n```\n##### 3.卸载软件\n``` bash\nbrew uninstall 软件标志名\n```\n##### 4.显示使用brew安装软件列表\n``` bash\nbrew list\n```\n##### 5.更新软件\n``` bash\nbrew upgrade 软件标志名（不写则默认所有使用brew安装的软件\n```  \n##### 6.查看需要升级软件\n``` bash\nbrew outdated\n```\n##### 7.查找需要软件\n``` bash\nbrew search\n```\n##### 8.查看brew安装的软件，所在位置\n``` bash\nbrew --cache\n```\n\n## mongodb安装\n### 执行以下命令\n``` bash\nbrew install mongodb\n```\n### 安装成功后再启动前创建数据写入目录\n##### 1.切换根目录\n``` bash\ncd /\n```\n##### 2.创建数据写入目录 参数-p作用需要时创建上层目录，如果存在忽略创建子目录,如创建失败可能涉及权限问题加sudo\n``` bash\nmkdir -p data/db\n```\n### 给数据写入目录添加可读可写权限\n##### 1.切换根目录\n``` bash\ncd /\n```\n##### 2.添加权限 -R参数表示递归\n``` bash\nsudo chown -R 用户名 data/db\n```\n### 启动mongodb\n##### 1.启动mongodb server\n``` bash\nmongod\n```\n##### 2.连接数据库,做数据库操作\n``` bash\nmongo\n```\n","slug":"mongodb/mongo-install-mac","published":1,"updated":"2018-01-11T21:18:52.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcjtejft0007x8xbt2h7rgtx","content":"<p>######Mongodb Mac安装主要采Homebrew,然后通过Homebrew 安装mongodb，然后创建数据写入目录data/db，给添加权限给data，最后启动mongod</p>\n<h2 id=\"Homebrew安装\"><a href=\"#Homebrew安装\" class=\"headerlink\" title=\"Homebrew安装\"></a>Homebrew安装</h2><h3 id=\"执行以下命令，等待安装完毕\"><a href=\"#执行以下命令，等待安装完毕\" class=\"headerlink\" title=\"执行以下命令，等待安装完毕\"></a>执行以下命令，等待安装完毕</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>具体其他使用方法可去官网查看</p>\n<h3 id=\"如果已经安装Homebrew下面提供一些常用命令\"><a href=\"#如果已经安装Homebrew下面提供一些常用命令\" class=\"headerlink\" title=\"如果已经安装Homebrew下面提供一些常用命令\"></a>如果已经安装Homebrew下面提供一些常用命令</h3><h5 id=\"1-更新brew本身\"><a href=\"#1-更新brew本身\" class=\"headerlink\" title=\"1.更新brew本身\"></a>1.更新brew本身</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew update</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-安装软件\"><a href=\"#2-安装软件\" class=\"headerlink\" title=\"2.安装软件\"></a>2.安装软件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install 软件标志</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-卸载软件\"><a href=\"#3-卸载软件\" class=\"headerlink\" title=\"3.卸载软件\"></a>3.卸载软件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew uninstall 软件标志名</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-显示使用brew安装软件列表\"><a href=\"#4-显示使用brew安装软件列表\" class=\"headerlink\" title=\"4.显示使用brew安装软件列表\"></a>4.显示使用brew安装软件列表</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew list</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-更新软件\"><a href=\"#5-更新软件\" class=\"headerlink\" title=\"5.更新软件\"></a>5.更新软件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew upgrade 软件标志名（不写则默认所有使用brew安装的软件</span><br><span class=\"line\">```  </span><br><span class=\"line\"><span class=\"comment\">##### 6.查看需要升级软件</span></span><br><span class=\"line\">``` bash</span><br><span class=\"line\">brew outdated</span><br></pre></td></tr></table></figure>\n<h5 id=\"7-查找需要软件\"><a href=\"#7-查找需要软件\" class=\"headerlink\" title=\"7.查找需要软件\"></a>7.查找需要软件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew search</span><br></pre></td></tr></table></figure>\n<h5 id=\"8-查看brew安装的软件，所在位置\"><a href=\"#8-查看brew安装的软件，所在位置\" class=\"headerlink\" title=\"8.查看brew安装的软件，所在位置\"></a>8.查看brew安装的软件，所在位置</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew --cache</span><br></pre></td></tr></table></figure>\n<h2 id=\"mongodb安装\"><a href=\"#mongodb安装\" class=\"headerlink\" title=\"mongodb安装\"></a>mongodb安装</h2><h3 id=\"执行以下命令\"><a href=\"#执行以下命令\" class=\"headerlink\" title=\"执行以下命令\"></a>执行以下命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install mongodb</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装成功后再启动前创建数据写入目录\"><a href=\"#安装成功后再启动前创建数据写入目录\" class=\"headerlink\" title=\"安装成功后再启动前创建数据写入目录\"></a>安装成功后再启动前创建数据写入目录</h3><h5 id=\"1-切换根目录\"><a href=\"#1-切换根目录\" class=\"headerlink\" title=\"1.切换根目录\"></a>1.切换根目录</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-创建数据写入目录-参数-p作用需要时创建上层目录，如果存在忽略创建子目录-如创建失败可能涉及权限问题加sudo\"><a href=\"#2-创建数据写入目录-参数-p作用需要时创建上层目录，如果存在忽略创建子目录-如创建失败可能涉及权限问题加sudo\" class=\"headerlink\" title=\"2.创建数据写入目录 参数-p作用需要时创建上层目录，如果存在忽略创建子目录,如创建失败可能涉及权限问题加sudo\"></a>2.创建数据写入目录 参数-p作用需要时创建上层目录，如果存在忽略创建子目录,如创建失败可能涉及权限问题加sudo</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p data/db</span><br></pre></td></tr></table></figure>\n<h3 id=\"给数据写入目录添加可读可写权限\"><a href=\"#给数据写入目录添加可读可写权限\" class=\"headerlink\" title=\"给数据写入目录添加可读可写权限\"></a>给数据写入目录添加可读可写权限</h3><h5 id=\"1-切换根目录-1\"><a href=\"#1-切换根目录-1\" class=\"headerlink\" title=\"1.切换根目录\"></a>1.切换根目录</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-添加权限-R参数表示递归\"><a href=\"#2-添加权限-R参数表示递归\" class=\"headerlink\" title=\"2.添加权限 -R参数表示递归\"></a>2.添加权限 -R参数表示递归</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R 用户名 data/db</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动mongodb\"><a href=\"#启动mongodb\" class=\"headerlink\" title=\"启动mongodb\"></a>启动mongodb</h3><h5 id=\"1-启动mongodb-server\"><a href=\"#1-启动mongodb-server\" class=\"headerlink\" title=\"1.启动mongodb server\"></a>1.启动mongodb server</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-连接数据库-做数据库操作\"><a href=\"#2-连接数据库-做数据库操作\" class=\"headerlink\" title=\"2.连接数据库,做数据库操作\"></a>2.连接数据库,做数据库操作</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>######Mongodb Mac安装主要采Homebrew,然后通过Homebrew 安装mongodb，然后创建数据写入目录data/db，给添加权限给data，最后启动mongod</p>\n<h2 id=\"Homebrew安装\"><a href=\"#Homebrew安装\" class=\"headerlink\" title=\"Homebrew安装\"></a>Homebrew安装</h2><h3 id=\"执行以下命令，等待安装完毕\"><a href=\"#执行以下命令，等待安装完毕\" class=\"headerlink\" title=\"执行以下命令，等待安装完毕\"></a>执行以下命令，等待安装完毕</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ruby -e <span class=\"string\">\"<span class=\"variable\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>具体其他使用方法可去官网查看</p>\n<h3 id=\"如果已经安装Homebrew下面提供一些常用命令\"><a href=\"#如果已经安装Homebrew下面提供一些常用命令\" class=\"headerlink\" title=\"如果已经安装Homebrew下面提供一些常用命令\"></a>如果已经安装Homebrew下面提供一些常用命令</h3><h5 id=\"1-更新brew本身\"><a href=\"#1-更新brew本身\" class=\"headerlink\" title=\"1.更新brew本身\"></a>1.更新brew本身</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew update</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-安装软件\"><a href=\"#2-安装软件\" class=\"headerlink\" title=\"2.安装软件\"></a>2.安装软件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install 软件标志</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-卸载软件\"><a href=\"#3-卸载软件\" class=\"headerlink\" title=\"3.卸载软件\"></a>3.卸载软件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew uninstall 软件标志名</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-显示使用brew安装软件列表\"><a href=\"#4-显示使用brew安装软件列表\" class=\"headerlink\" title=\"4.显示使用brew安装软件列表\"></a>4.显示使用brew安装软件列表</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew list</span><br></pre></td></tr></table></figure>\n<h5 id=\"5-更新软件\"><a href=\"#5-更新软件\" class=\"headerlink\" title=\"5.更新软件\"></a>5.更新软件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew upgrade 软件标志名（不写则默认所有使用brew安装的软件</span><br><span class=\"line\">```  </span><br><span class=\"line\"><span class=\"comment\">##### 6.查看需要升级软件</span></span><br><span class=\"line\">``` bash</span><br><span class=\"line\">brew outdated</span><br></pre></td></tr></table></figure>\n<h5 id=\"7-查找需要软件\"><a href=\"#7-查找需要软件\" class=\"headerlink\" title=\"7.查找需要软件\"></a>7.查找需要软件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew search</span><br></pre></td></tr></table></figure>\n<h5 id=\"8-查看brew安装的软件，所在位置\"><a href=\"#8-查看brew安装的软件，所在位置\" class=\"headerlink\" title=\"8.查看brew安装的软件，所在位置\"></a>8.查看brew安装的软件，所在位置</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew --cache</span><br></pre></td></tr></table></figure>\n<h2 id=\"mongodb安装\"><a href=\"#mongodb安装\" class=\"headerlink\" title=\"mongodb安装\"></a>mongodb安装</h2><h3 id=\"执行以下命令\"><a href=\"#执行以下命令\" class=\"headerlink\" title=\"执行以下命令\"></a>执行以下命令</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install mongodb</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装成功后再启动前创建数据写入目录\"><a href=\"#安装成功后再启动前创建数据写入目录\" class=\"headerlink\" title=\"安装成功后再启动前创建数据写入目录\"></a>安装成功后再启动前创建数据写入目录</h3><h5 id=\"1-切换根目录\"><a href=\"#1-切换根目录\" class=\"headerlink\" title=\"1.切换根目录\"></a>1.切换根目录</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-创建数据写入目录-参数-p作用需要时创建上层目录，如果存在忽略创建子目录-如创建失败可能涉及权限问题加sudo\"><a href=\"#2-创建数据写入目录-参数-p作用需要时创建上层目录，如果存在忽略创建子目录-如创建失败可能涉及权限问题加sudo\" class=\"headerlink\" title=\"2.创建数据写入目录 参数-p作用需要时创建上层目录，如果存在忽略创建子目录,如创建失败可能涉及权限问题加sudo\"></a>2.创建数据写入目录 参数-p作用需要时创建上层目录，如果存在忽略创建子目录,如创建失败可能涉及权限问题加sudo</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p data/db</span><br></pre></td></tr></table></figure>\n<h3 id=\"给数据写入目录添加可读可写权限\"><a href=\"#给数据写入目录添加可读可写权限\" class=\"headerlink\" title=\"给数据写入目录添加可读可写权限\"></a>给数据写入目录添加可读可写权限</h3><h5 id=\"1-切换根目录-1\"><a href=\"#1-切换根目录-1\" class=\"headerlink\" title=\"1.切换根目录\"></a>1.切换根目录</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-添加权限-R参数表示递归\"><a href=\"#2-添加权限-R参数表示递归\" class=\"headerlink\" title=\"2.添加权限 -R参数表示递归\"></a>2.添加权限 -R参数表示递归</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R 用户名 data/db</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动mongodb\"><a href=\"#启动mongodb\" class=\"headerlink\" title=\"启动mongodb\"></a>启动mongodb</h3><h5 id=\"1-启动mongodb-server\"><a href=\"#1-启动mongodb-server\" class=\"headerlink\" title=\"1.启动mongodb server\"></a>1.启动mongodb server</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongod</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-连接数据库-做数据库操作\"><a href=\"#2-连接数据库-做数据库操作\" class=\"headerlink\" title=\"2.连接数据库,做数据库操作\"></a>2.连接数据库,做数据库操作</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mongo</span><br></pre></td></tr></table></figure>\n"},{"_content":"const fs = require('fs');\nconst path = require('path')\nconst process = require('process')\n\nconst timeDateHistory = new Date()\n\nfs.readFile(path.join(__dirname,'1.txt'),function(){\n    let timeDateNow = new Date() - timeDateHistory\n    console.log(`${timeDateNow}ms readFile01 Time`)  \n})\nfs.readFile(path.join(__dirname,'2.txt'),function(){\n    let timeDateNow = new Date() - timeDateHistory\n    console.log(`${timeDateNow}ms readFile02 Time`)  \n})\nprocess.nextTick(function(){\n    let timeDateNow = new Date() - timeDateHistory\n    console.log(`${timeDateNow}ms next Tick Time`)\n})\nsetImmediate(function(){\n    let timeDateNow = new Date() - timeDateHistory\n    for(let i=0;i<10000000;i++){}\n    console.log(`${timeDateNow}ms setImmediate Time`)  \n})\nsetTimeout(function(){\n    let timeDateNow = new Date() - timeDateHistory\n    console.log(`${timeDateNow}ms setTimeout Time`)  \n})","source":"_drafts/javascript/eventLoop/eventLoop.js","raw":"const fs = require('fs');\nconst path = require('path')\nconst process = require('process')\n\nconst timeDateHistory = new Date()\n\nfs.readFile(path.join(__dirname,'1.txt'),function(){\n    let timeDateNow = new Date() - timeDateHistory\n    console.log(`${timeDateNow}ms readFile01 Time`)  \n})\nfs.readFile(path.join(__dirname,'2.txt'),function(){\n    let timeDateNow = new Date() - timeDateHistory\n    console.log(`${timeDateNow}ms readFile02 Time`)  \n})\nprocess.nextTick(function(){\n    let timeDateNow = new Date() - timeDateHistory\n    console.log(`${timeDateNow}ms next Tick Time`)\n})\nsetImmediate(function(){\n    let timeDateNow = new Date() - timeDateHistory\n    for(let i=0;i<10000000;i++){}\n    console.log(`${timeDateNow}ms setImmediate Time`)  \n})\nsetTimeout(function(){\n    let timeDateNow = new Date() - timeDateHistory\n    console.log(`${timeDateNow}ms setTimeout Time`)  \n})","slug":"javascript/eventLoop/eventLoop","published":0,"date":"2018-01-16T23:46:24.503Z","updated":"2018-01-17T03:24:10.955Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcjtejif001wx8xb7j8juepk","content":"const fs = require('fs');\nconst path = require('path')\nconst process = require('process')\n\nconst timeDateHistory = new Date()\n\nfs.readFile(path.join(__dirname,'1.txt'),function(){\n    let timeDateNow = new Date() - timeDateHistory\n    console.log(`${timeDateNow}ms readFile01 Time`)  \n})\nfs.readFile(path.join(__dirname,'2.txt'),function(){\n    let timeDateNow = new Date() - timeDateHistory\n    console.log(`${timeDateNow}ms readFile02 Time`)  \n})\nprocess.nextTick(function(){\n    let timeDateNow = new Date() - timeDateHistory\n    console.log(`${timeDateNow}ms next Tick Time`)\n})\nsetImmediate(function(){\n    let timeDateNow = new Date() - timeDateHistory\n    for(let i=0;i","site":{"data":{}},"excerpt":"","more":"const fs = require('fs');\nconst path = require('path')\nconst process = require('process')\n\nconst timeDateHistory = new Date()\n\nfs.readFile(path.join(__dirname,'1.txt'),function(){\n    let timeDateNow = new Date() - timeDateHistory\n    console.log(`${timeDateNow}ms readFile01 Time`)  \n})\nfs.readFile(path.join(__dirname,'2.txt'),function(){\n    let timeDateNow = new Date() - timeDateHistory\n    console.log(`${timeDateNow}ms readFile02 Time`)  \n})\nprocess.nextTick(function(){\n    let timeDateNow = new Date() - timeDateHistory\n    console.log(`${timeDateNow}ms next Tick Time`)\n})\nsetImmediate(function(){\n    let timeDateNow = new Date() - timeDateHistory\n    for(let i=0;i"},{"_content":"function MyPromise(task){\n    let self = this\n    self.state = 'pending'\n    self.value = undefined\n    self.reason = undefined\n\n    self.onResolvedCallbacks = []\n    self.onRejectedCallbacks = []\n    function resolve(value){\n        if(value instanceof Promise){\n            return value.task(resolve,reject)\n        }\n        setTimeout(()=>{\n            self.state = 'fulfilled'\n            self.value = value\n            self.onResolvedCallbacks.forEach(item=>item(self.value))    \n        })\n    }\n    function reject(reason){\n        setTimeout(()=>{\n            self.state = 'rejected'\n            self.reason = reason\n            self.onRejectedCallbacks.forEach(item=>item(self.reason))\n        })\n    }\n    try{\n        task(resolve,reject)\n    }catch(error){\n        reject(error)\n    }\n}\n\nfunction resolvePromise(promise2,x,resolve,reject){\n    if(promise2 === x)reject(new TypeError('重复调用'))\n    let then,called\n    if(x !=null &&(typeof x === 'function' || typeof x === 'object')){\n        try {\n            then = x.then\n            if(typeof then === 'function'){\n                then.call(x,function(y){\n                    if(called)return\n                    called = true\n                    resolvePromise(promise2,y,resolve,reject)\n                },function(err){\n                    if(called)return\n                    called = true\n                    reject(err)\n                })\n            }else{\n                resolve(x)\n            }\n        } catch (error) {\n            if(called)return\n            called = true\n            reject(error)\n        }\n    }else{\n        resolve(x)\n    }\n}\n\nMyPromise.prototype.then = function(onFulFilled,onRejected){\n    onFulFilled = typeof onFulFilled === 'function'?onFulFilled:value=>value\n    onRejected = typeof onRejected === 'function'?onRejected:reason=>{throw reason}\n    let self = this\n    let promise2\n    if(self.state == 'fulfilled'){\n        promise2 = new MyPromise((resolve,reject)=>{\n            try {\n                let x = onFulFilled(self.value)\n                resolvePromise(promise2,x,resolve,reject)\n            } catch (error) {\n                reject(err)\n            }\n        })\n    }else if(self.state == 'rejected'){\n        promise2 = new MyPromise((resolve,reject)=>{\n            try {\n                let x = onRejected(self.reason)\n                resolvePromise(promise2,x,resolve,reject)\n            } catch (error) {\n                reject(error)\n            }\n        })\n    }else if(self.state == 'pending'){\n        promise2 = new MyPromise((resolve,reject)=>{\n            self.onResolvedCallbacks.push((value)=>{\n                try {\n                    let x = onFulFilled(value)\n                    resolvePromise(promise2,x,resolve,reject)\n                } catch (error) {\n                    reject(error)\n                }\n            })\n            self.onRejectedCallbacks.push((reason)=>{\n                try {\n                    let x = onRejected(reason)\n                    resolvePromise(promise2,x,resolve,reject)\n                } catch (error) {\n                    reject(error)\n                }\n            })\n        })\n    }\n    return promise2\n}\nMyPromise.prototype.catch = function (onRejected) {\n    return this.then(null, onRejected);\n}\nMyPromise.deferred = MyPromise.defer = function () {\n    var defer = {};\n    defer.promise = new MyPromise(function (resolve, reject) {\n      defer.resolve = resolve;\n      defer.reject = reject;\n    })\n    return defer;\n  }\nMyPromise.all = function(promises){\n    return new MyPromise((resolve,reject)=>{\n        let result = []\n        let called = true\n        for(let i=0;i<promises.length;i++){\n            promises[i].then((value)=>{\n                result[i] = value\n                if(i=== promises.length-1 && called){\n                    resolve(result)\n                }\n            },(reason)=>{\n                called = false\n                reject(reason)\n            })\n        }\n    })\n}\nMyPromise.race = function(promises){\n    return new MyPromise((resolve,reject)=>{\n        let result = []\n        promises.forEach(promise=>{\n            promise.then((value)=>{\n                result.push(value)\n                if(result.length == 1){\n                    resolve(value)\n                }\n            },(reason)=>{\n                result.push(reason)\n                if(result.length == 1){\n                    reject(reason)\n                }\n            })\n        })\n    })\n}\n\nmodule.exports = MyPromise","source":"_drafts/javascript/promise/myPromise.js","raw":"function MyPromise(task){\n    let self = this\n    self.state = 'pending'\n    self.value = undefined\n    self.reason = undefined\n\n    self.onResolvedCallbacks = []\n    self.onRejectedCallbacks = []\n    function resolve(value){\n        if(value instanceof Promise){\n            return value.task(resolve,reject)\n        }\n        setTimeout(()=>{\n            self.state = 'fulfilled'\n            self.value = value\n            self.onResolvedCallbacks.forEach(item=>item(self.value))    \n        })\n    }\n    function reject(reason){\n        setTimeout(()=>{\n            self.state = 'rejected'\n            self.reason = reason\n            self.onRejectedCallbacks.forEach(item=>item(self.reason))\n        })\n    }\n    try{\n        task(resolve,reject)\n    }catch(error){\n        reject(error)\n    }\n}\n\nfunction resolvePromise(promise2,x,resolve,reject){\n    if(promise2 === x)reject(new TypeError('重复调用'))\n    let then,called\n    if(x !=null &&(typeof x === 'function' || typeof x === 'object')){\n        try {\n            then = x.then\n            if(typeof then === 'function'){\n                then.call(x,function(y){\n                    if(called)return\n                    called = true\n                    resolvePromise(promise2,y,resolve,reject)\n                },function(err){\n                    if(called)return\n                    called = true\n                    reject(err)\n                })\n            }else{\n                resolve(x)\n            }\n        } catch (error) {\n            if(called)return\n            called = true\n            reject(error)\n        }\n    }else{\n        resolve(x)\n    }\n}\n\nMyPromise.prototype.then = function(onFulFilled,onRejected){\n    onFulFilled = typeof onFulFilled === 'function'?onFulFilled:value=>value\n    onRejected = typeof onRejected === 'function'?onRejected:reason=>{throw reason}\n    let self = this\n    let promise2\n    if(self.state == 'fulfilled'){\n        promise2 = new MyPromise((resolve,reject)=>{\n            try {\n                let x = onFulFilled(self.value)\n                resolvePromise(promise2,x,resolve,reject)\n            } catch (error) {\n                reject(err)\n            }\n        })\n    }else if(self.state == 'rejected'){\n        promise2 = new MyPromise((resolve,reject)=>{\n            try {\n                let x = onRejected(self.reason)\n                resolvePromise(promise2,x,resolve,reject)\n            } catch (error) {\n                reject(error)\n            }\n        })\n    }else if(self.state == 'pending'){\n        promise2 = new MyPromise((resolve,reject)=>{\n            self.onResolvedCallbacks.push((value)=>{\n                try {\n                    let x = onFulFilled(value)\n                    resolvePromise(promise2,x,resolve,reject)\n                } catch (error) {\n                    reject(error)\n                }\n            })\n            self.onRejectedCallbacks.push((reason)=>{\n                try {\n                    let x = onRejected(reason)\n                    resolvePromise(promise2,x,resolve,reject)\n                } catch (error) {\n                    reject(error)\n                }\n            })\n        })\n    }\n    return promise2\n}\nMyPromise.prototype.catch = function (onRejected) {\n    return this.then(null, onRejected);\n}\nMyPromise.deferred = MyPromise.defer = function () {\n    var defer = {};\n    defer.promise = new MyPromise(function (resolve, reject) {\n      defer.resolve = resolve;\n      defer.reject = reject;\n    })\n    return defer;\n  }\nMyPromise.all = function(promises){\n    return new MyPromise((resolve,reject)=>{\n        let result = []\n        let called = true\n        for(let i=0;i<promises.length;i++){\n            promises[i].then((value)=>{\n                result[i] = value\n                if(i=== promises.length-1 && called){\n                    resolve(result)\n                }\n            },(reason)=>{\n                called = false\n                reject(reason)\n            })\n        }\n    })\n}\nMyPromise.race = function(promises){\n    return new MyPromise((resolve,reject)=>{\n        let result = []\n        promises.forEach(promise=>{\n            promise.then((value)=>{\n                result.push(value)\n                if(result.length == 1){\n                    resolve(value)\n                }\n            },(reason)=>{\n                result.push(reason)\n                if(result.length == 1){\n                    reject(reason)\n                }\n            })\n        })\n    })\n}\n\nmodule.exports = MyPromise","slug":"javascript/promise/myPromise","published":0,"date":"2018-01-13T05:13:54.234Z","updated":"2018-01-13T05:19:48.948Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcjtejig001xx8xbjdqa2cig","content":"function MyPromise(task){\n    let self = this\n    self.state = 'pending'\n    self.value = undefined\n    self.reason = undefined\n\n    self.onResolvedCallbacks = []\n    self.onRejectedCallbacks = []\n    function resolve(value){\n        if(value instanceof Promise){\n            return value.task(resolve,reject)\n        }\n        setTimeout(()=>{\n            self.state = 'fulfilled'\n            self.value = value\n            self.onResolvedCallbacks.forEach(item=>item(self.value))    \n        })\n    }\n    function reject(reason){\n        setTimeout(()=>{\n            self.state = 'rejected'\n            self.reason = reason\n            self.onRejectedCallbacks.forEach(item=>item(self.reason))\n        })\n    }\n    try{\n        task(resolve,reject)\n    }catch(error){\n        reject(error)\n    }\n}\n\nfunction resolvePromise(promise2,x,resolve,reject){\n    if(promise2 === x)reject(new TypeError('重复调用'))\n    let then,called\n    if(x !=null &&(typeof x === 'function' || typeof x === 'object')){\n        try {\n            then = x.then\n            if(typeof then === 'function'){\n                then.call(x,function(y){\n                    if(called)return\n                    called = true\n                    resolvePromise(promise2,y,resolve,reject)\n                },function(err){\n                    if(called)return\n                    called = true\n                    reject(err)\n                })\n            }else{\n                resolve(x)\n            }\n        } catch (error) {\n            if(called)return\n            called = true\n            reject(error)\n        }\n    }else{\n        resolve(x)\n    }\n}\n\nMyPromise.prototype.then = function(onFulFilled,onRejected){\n    onFulFilled = typeof onFulFilled === 'function'?onFulFilled:value=>value\n    onRejected = typeof onRejected === 'function'?onRejected:reason=>{throw reason}\n    let self = this\n    let promise2\n    if(self.state == 'fulfilled'){\n        promise2 = new MyPromise((resolve,reject)=>{\n            try {\n                let x = onFulFilled(self.value)\n                resolvePromise(promise2,x,resolve,reject)\n            } catch (error) {\n                reject(err)\n            }\n        })\n    }else if(self.state == 'rejected'){\n        promise2 = new MyPromise((resolve,reject)=>{\n            try {\n                let x = onRejected(self.reason)\n                resolvePromise(promise2,x,resolve,reject)\n            } catch (error) {\n                reject(error)\n            }\n        })\n    }else if(self.state == 'pending'){\n        promise2 = new MyPromise((resolve,reject)=>{\n            self.onResolvedCallbacks.push((value)=>{\n                try {\n                    let x = onFulFilled(value)\n                    resolvePromise(promise2,x,resolve,reject)\n                } catch (error) {\n                    reject(error)\n                }\n            })\n            self.onRejectedCallbacks.push((reason)=>{\n                try {\n                    let x = onRejected(reason)\n                    resolvePromise(promise2,x,resolve,reject)\n                } catch (error) {\n                    reject(error)\n                }\n            })\n        })\n    }\n    return promise2\n}\nMyPromise.prototype.catch = function (onRejected) {\n    return this.then(null, onRejected);\n}\nMyPromise.deferred = MyPromise.defer = function () {\n    var defer = {};\n    defer.promise = new MyPromise(function (resolve, reject) {\n      defer.resolve = resolve;\n      defer.reject = reject;\n    })\n    return defer;\n  }\nMyPromise.all = function(promises){\n    return new MyPromise((resolve,reject)=>{\n        let result = []\n        let called = true\n        for(let i=0;i<promises.length;i++){ promises[i].then((value)=\"\">{\n                result[i] = value\n                if(i=== promises.length-1 && called){\n                    resolve(result)\n                }\n            },(reason)=>{\n                called = false\n                reject(reason)\n            })\n        }\n    })\n}\nMyPromise.race = function(promises){\n    return new MyPromise((resolve,reject)=>{\n        let result = []\n        promises.forEach(promise=>{\n            promise.then((value)=>{\n                result.push(value)\n                if(result.length == 1){\n                    resolve(value)\n                }\n            },(reason)=>{\n                result.push(reason)\n                if(result.length == 1){\n                    reject(reason)\n                }\n            })\n        })\n    })\n}\n\nmodule.exports = MyPromise</promises.length;i++){>","site":{"data":{}},"excerpt":"","more":"function MyPromise(task){\n    let self = this\n    self.state = 'pending'\n    self.value = undefined\n    self.reason = undefined\n\n    self.onResolvedCallbacks = []\n    self.onRejectedCallbacks = []\n    function resolve(value){\n        if(value instanceof Promise){\n            return value.task(resolve,reject)\n        }\n        setTimeout(()=>{\n            self.state = 'fulfilled'\n            self.value = value\n            self.onResolvedCallbacks.forEach(item=>item(self.value))    \n        })\n    }\n    function reject(reason){\n        setTimeout(()=>{\n            self.state = 'rejected'\n            self.reason = reason\n            self.onRejectedCallbacks.forEach(item=>item(self.reason))\n        })\n    }\n    try{\n        task(resolve,reject)\n    }catch(error){\n        reject(error)\n    }\n}\n\nfunction resolvePromise(promise2,x,resolve,reject){\n    if(promise2 === x)reject(new TypeError('重复调用'))\n    let then,called\n    if(x !=null &&(typeof x === 'function' || typeof x === 'object')){\n        try {\n            then = x.then\n            if(typeof then === 'function'){\n                then.call(x,function(y){\n                    if(called)return\n                    called = true\n                    resolvePromise(promise2,y,resolve,reject)\n                },function(err){\n                    if(called)return\n                    called = true\n                    reject(err)\n                })\n            }else{\n                resolve(x)\n            }\n        } catch (error) {\n            if(called)return\n            called = true\n            reject(error)\n        }\n    }else{\n        resolve(x)\n    }\n}\n\nMyPromise.prototype.then = function(onFulFilled,onRejected){\n    onFulFilled = typeof onFulFilled === 'function'?onFulFilled:value=>value\n    onRejected = typeof onRejected === 'function'?onRejected:reason=>{throw reason}\n    let self = this\n    let promise2\n    if(self.state == 'fulfilled'){\n        promise2 = new MyPromise((resolve,reject)=>{\n            try {\n                let x = onFulFilled(self.value)\n                resolvePromise(promise2,x,resolve,reject)\n            } catch (error) {\n                reject(err)\n            }\n        })\n    }else if(self.state == 'rejected'){\n        promise2 = new MyPromise((resolve,reject)=>{\n            try {\n                let x = onRejected(self.reason)\n                resolvePromise(promise2,x,resolve,reject)\n            } catch (error) {\n                reject(error)\n            }\n        })\n    }else if(self.state == 'pending'){\n        promise2 = new MyPromise((resolve,reject)=>{\n            self.onResolvedCallbacks.push((value)=>{\n                try {\n                    let x = onFulFilled(value)\n                    resolvePromise(promise2,x,resolve,reject)\n                } catch (error) {\n                    reject(error)\n                }\n            })\n            self.onRejectedCallbacks.push((reason)=>{\n                try {\n                    let x = onRejected(reason)\n                    resolvePromise(promise2,x,resolve,reject)\n                } catch (error) {\n                    reject(error)\n                }\n            })\n        })\n    }\n    return promise2\n}\nMyPromise.prototype.catch = function (onRejected) {\n    return this.then(null, onRejected);\n}\nMyPromise.deferred = MyPromise.defer = function () {\n    var defer = {};\n    defer.promise = new MyPromise(function (resolve, reject) {\n      defer.resolve = resolve;\n      defer.reject = reject;\n    })\n    return defer;\n  }\nMyPromise.all = function(promises){\n    return new MyPromise((resolve,reject)=>{\n        let result = []\n        let called = true\n        for(let i=0;i<promises.length;i++){ promises[i].then((value)=\"\">{\n                result[i] = value\n                if(i=== promises.length-1 && called){\n                    resolve(result)\n                }\n            },(reason)=>{\n                called = false\n                reject(reason)\n            })\n        }\n    })\n}\nMyPromise.race = function(promises){\n    return new MyPromise((resolve,reject)=>{\n        let result = []\n        promises.forEach(promise=>{\n            promise.then((value)=>{\n                result.push(value)\n                if(result.length == 1){\n                    resolve(value)\n                }\n            },(reason)=>{\n                result.push(reason)\n                if(result.length == 1){\n                    reject(reason)\n                }\n            })\n        })\n    })\n}\n\nmodule.exports = MyPromise</promises.length;i++){>"},{"_content":"const MyPromise = require('./myPromise')\n\nlet promiseA = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功A')\n        }else{\n            reject('小于失败A')\n        }\n    },2000)\n})\nlet promiseB = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功B')\n        }else{\n            reject('小于失败B')\n        }\n    },1000)\n})\n\nMyPromise.race([promiseA,promiseB]).then((value)=>{\n    console.log(`我是value： ${value}`)\n},(reason)=>{\n    console.log(`我是reason： ${reason}`)\n})\n\n// promiseA.then((value)=>{\n//     console.log(`我是value： ${value}`)\n//     return new MyPromise((resolve,reject)=>{\n//         resolve(value)\n//     })\n// },(reason)=>{\n//     console.log(reason)\n// }).then((data)=>{\n//     console.log(`我是data： ${data}`)\n// })","source":"_drafts/javascript/promise/example.js","raw":"const MyPromise = require('./myPromise')\n\nlet promiseA = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功A')\n        }else{\n            reject('小于失败A')\n        }\n    },2000)\n})\nlet promiseB = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功B')\n        }else{\n            reject('小于失败B')\n        }\n    },1000)\n})\n\nMyPromise.race([promiseA,promiseB]).then((value)=>{\n    console.log(`我是value： ${value}`)\n},(reason)=>{\n    console.log(`我是reason： ${reason}`)\n})\n\n// promiseA.then((value)=>{\n//     console.log(`我是value： ${value}`)\n//     return new MyPromise((resolve,reject)=>{\n//         resolve(value)\n//     })\n// },(reason)=>{\n//     console.log(reason)\n// }).then((data)=>{\n//     console.log(`我是data： ${data}`)\n// })","slug":"javascript/promise/example","published":0,"date":"2018-01-13T05:15:02.951Z","updated":"2018-01-13T05:19:45.488Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjcjtejih001yx8xbq5ii7gy7","content":"const MyPromise = require('./myPromise')\n\nlet promiseA = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功A')\n        }else{\n            reject('小于失败A')\n        }\n    },2000)\n})\nlet promiseB = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功B')\n        }else{\n            reject('小于失败B')\n        }\n    },1000)\n})\n\nMyPromise.race([promiseA,promiseB]).then((value)=>{\n    console.log(`我是value： ${value}`)\n},(reason)=>{\n    console.log(`我是reason： ${reason}`)\n})\n\n// promiseA.then((value)=>{\n//     console.log(`我是value： ${value}`)\n//     return new MyPromise((resolve,reject)=>{\n//         resolve(value)\n//     })\n// },(reason)=>{\n//     console.log(reason)\n// }).then((data)=>{\n//     console.log(`我是data： ${data}`)\n// })","site":{"data":{}},"excerpt":"","more":"const MyPromise = require('./myPromise')\n\nlet promiseA = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功A')\n        }else{\n            reject('小于失败A')\n        }\n    },2000)\n})\nlet promiseB = new MyPromise((resolve,reject)=>{\n    let num = Math.random()\n    setTimeout(()=>{\n        if(num>.5){\n            resolve('大于成功B')\n        }else{\n            reject('小于失败B')\n        }\n    },1000)\n})\n\nMyPromise.race([promiseA,promiseB]).then((value)=>{\n    console.log(`我是value： ${value}`)\n},(reason)=>{\n    console.log(`我是reason： ${reason}`)\n})\n\n// promiseA.then((value)=>{\n//     console.log(`我是value： ${value}`)\n//     return new MyPromise((resolve,reject)=>{\n//         resolve(value)\n//     })\n// },(reason)=>{\n//     console.log(reason)\n// }).then((data)=>{\n//     console.log(`我是data： ${data}`)\n// })"}],"PostAsset":[{"_id":"source/_posts/mongodb/mongo-install-linux/mongohub.png","post":"cjcjtejfr0006x8xbt7y0lx78","slug":"mongohub.png","modified":1,"renderable":1},{"_id":"source/_posts/javascript/eventLoop/eventloop-setTimeout0-file.png","post":"cjcjtejfl0002x8xbdu3h1dqi","slug":"eventloop-setTimeout0-file.png","modified":1,"renderable":1},{"_id":"source/_posts/javascript/eventLoop/eventloop-setTimeout0-unfile.png","post":"cjcjtejfl0002x8xbdu3h1dqi","slug":"eventloop-setTimeout0-unfile.png","modified":1,"renderable":1},{"_id":"source/_posts/javascript/eventLoop/eventloop-setTimeout100-file.png","post":"cjcjtejfl0002x8xbdu3h1dqi","slug":"eventloop-setTimeout100-file.png","modified":1,"renderable":1},{"_id":"source/_posts/javascript/eventLoop/eventloop-setTimeout100-unfile.png","post":"cjcjtejfl0002x8xbdu3h1dqi","slug":"eventloop-setTimeout100-unfile.png","modified":1,"renderable":1},{"_id":"source/_posts/javascript/eventLoop/eventloop.png","post":"cjcjtejfl0002x8xbdu3h1dqi","slug":"eventloop.png","modified":1,"renderable":1},{"_id":"source/_posts/javascript/eventLoop/nodesystem.png","post":"cjcjtejfl0002x8xbdu3h1dqi","slug":"nodesystem.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjcjtejfl0002x8xbdu3h1dqi","category_id":"cjcjtejfq0004x8xbgfvqqrju","_id":"cjcjtejg2000bx8xbnxbgbzmi"},{"post_id":"cjcjtejfo0003x8xbquziji4q","category_id":"cjcjtejfq0004x8xbgfvqqrju","_id":"cjcjtejg4000dx8xb4ibpnd3e"},{"post_id":"cjcjtejfr0006x8xbt7y0lx78","category_id":"cjcjtejg2000ax8xbpc623qvu","_id":"cjcjtejg4000gx8xb5naxsaoj"},{"post_id":"cjcjtejft0007x8xbt2h7rgtx","category_id":"cjcjtejg2000ax8xbpc623qvu","_id":"cjcjtejg5000ix8xb65vulzbe"}],"PostTag":[{"post_id":"cjcjtejfl0002x8xbdu3h1dqi","tag_id":"cjcjtejfr0005x8xbvcfl5l4k","_id":"cjcjtejg5000mx8xblzjy8b56"},{"post_id":"cjcjtejfl0002x8xbdu3h1dqi","tag_id":"cjcjtejfw0009x8xbzzw957tg","_id":"cjcjtejg5000nx8xb66mymx5q"},{"post_id":"cjcjtejfl0002x8xbdu3h1dqi","tag_id":"cjcjtejg2000cx8xbiind9tcu","_id":"cjcjtejg6000px8xb775uxjpl"},{"post_id":"cjcjtejfl0002x8xbdu3h1dqi","tag_id":"cjcjtejg4000fx8xbreoelcg4","_id":"cjcjtejg6000qx8xbtn39m5jq"},{"post_id":"cjcjtejfl0002x8xbdu3h1dqi","tag_id":"cjcjtejg4000hx8xbhe38pk3a","_id":"cjcjtejg6000sx8xb29vkgt1d"},{"post_id":"cjcjtejfl0002x8xbdu3h1dqi","tag_id":"cjcjtejg5000jx8xb5t5t7s39","_id":"cjcjtejg6000tx8xbkvihcawt"},{"post_id":"cjcjtejfl0002x8xbdu3h1dqi","tag_id":"cjcjtejg5000kx8xbnlrlmj9i","_id":"cjcjtejg6000vx8xb3zwhiw3m"},{"post_id":"cjcjtejfo0003x8xbquziji4q","tag_id":"cjcjtejfr0005x8xbvcfl5l4k","_id":"cjcjtejg70011x8xbvyiraozd"},{"post_id":"cjcjtejfo0003x8xbquziji4q","tag_id":"cjcjtejg5000ox8xbbm25vr8z","_id":"cjcjtejg70012x8xbpobp0ep1"},{"post_id":"cjcjtejfo0003x8xbquziji4q","tag_id":"cjcjtejg6000rx8xbc2j7w15s","_id":"cjcjtejg70014x8xbhwnl00ig"},{"post_id":"cjcjtejfo0003x8xbquziji4q","tag_id":"cjcjtejg6000ux8xbwkjmf3tw","_id":"cjcjtejg80015x8xb0c109acd"},{"post_id":"cjcjtejfo0003x8xbquziji4q","tag_id":"cjcjtejg6000wx8xbjwmh1qke","_id":"cjcjtejg80017x8xbxf1nf3zs"},{"post_id":"cjcjtejfo0003x8xbquziji4q","tag_id":"cjcjtejg7000xx8xbxs6tfor6","_id":"cjcjtejg80018x8xbwi8cn8zs"},{"post_id":"cjcjtejfo0003x8xbquziji4q","tag_id":"cjcjtejg7000yx8xbwk29gnr5","_id":"cjcjtejg8001ax8xbc1izq43r"},{"post_id":"cjcjtejfo0003x8xbquziji4q","tag_id":"cjcjtejg7000zx8xb3shughh5","_id":"cjcjtejg8001bx8xbxj6r2h0t"},{"post_id":"cjcjtejfr0006x8xbt7y0lx78","tag_id":"cjcjtejg70010x8xb4umsf1me","_id":"cjcjtejga001fx8xble19j5sj"},{"post_id":"cjcjtejfr0006x8xbt7y0lx78","tag_id":"cjcjtejg70013x8xbzo7mo97h","_id":"cjcjtejga001gx8xbzjpxmpl9"},{"post_id":"cjcjtejfr0006x8xbt7y0lx78","tag_id":"cjcjtejg80016x8xb5l5kuhnw","_id":"cjcjtejga001ix8xbebrflb60"},{"post_id":"cjcjtejfr0006x8xbt7y0lx78","tag_id":"cjcjtejg80019x8xbvh15d29c","_id":"cjcjtejga001jx8xbkareoubn"},{"post_id":"cjcjtejfr0006x8xbt7y0lx78","tag_id":"cjcjtejg9001cx8xbfsumjc38","_id":"cjcjtejgb001lx8xbkhk8xurc"},{"post_id":"cjcjtejfr0006x8xbt7y0lx78","tag_id":"cjcjtejg9001dx8xb5wggbe7d","_id":"cjcjtejgb001mx8xb2dcdywac"},{"post_id":"cjcjtejft0007x8xbt2h7rgtx","tag_id":"cjcjtejg70010x8xb4umsf1me","_id":"cjcjtejgc001qx8xbcd32colt"},{"post_id":"cjcjtejft0007x8xbt2h7rgtx","tag_id":"cjcjtejg70013x8xbzo7mo97h","_id":"cjcjtejgc001rx8xbreeklnka"},{"post_id":"cjcjtejft0007x8xbt2h7rgtx","tag_id":"cjcjtejg80016x8xb5l5kuhnw","_id":"cjcjtejgc001sx8xb9ey8e9sz"},{"post_id":"cjcjtejft0007x8xbt2h7rgtx","tag_id":"cjcjtejg80019x8xbvh15d29c","_id":"cjcjtejgc001tx8xbl59q8gmd"},{"post_id":"cjcjtejft0007x8xbt2h7rgtx","tag_id":"cjcjtejgb001ox8xbfnaks0mk","_id":"cjcjtejgc001ux8xbdhpqvpd0"},{"post_id":"cjcjtejft0007x8xbt2h7rgtx","tag_id":"cjcjtejgb001px8xbhlbpdcny","_id":"cjcjtejgc001vx8xbxa9fsy5g"}],"Tag":[{"name":"javascript","_id":"cjcjtejfr0005x8xbvcfl5l4k"},{"name":"event loop","_id":"cjcjtejfw0009x8xbzzw957tg"},{"name":"Event Loop","_id":"cjcjtejg2000cx8xbiind9tcu"},{"name":"Node","_id":"cjcjtejg4000fx8xbreoelcg4"},{"name":"Node.js","_id":"cjcjtejg4000hx8xbhe38pk3a"},{"name":"node","_id":"cjcjtejg5000jx8xb5t5t7s39"},{"name":"node.js","_id":"cjcjtejg5000kx8xbnlrlmj9i"},{"name":"es6","_id":"cjcjtejg5000ox8xbbm25vr8z"},{"name":"es7","_id":"cjcjtejg6000rx8xbc2j7w15s"},{"name":"promise","_id":"cjcjtejg6000ux8xbwkjmf3tw"},{"name":"promise.all","_id":"cjcjtejg6000wx8xbjwmh1qke"},{"name":"promise.race","_id":"cjcjtejg7000xx8xbxs6tfor6"},{"name":"promise.resolve","_id":"cjcjtejg7000yx8xbwk29gnr5"},{"name":"promise.reject","_id":"cjcjtejg7000zx8xb3shughh5"},{"name":"mongodb","_id":"cjcjtejg70010x8xb4umsf1me"},{"name":"mongo","_id":"cjcjtejg70013x8xbzo7mo97h"},{"name":"Mongodb","_id":"cjcjtejg80016x8xb5l5kuhnw"},{"name":"Mongo","_id":"cjcjtejg80019x8xbvh15d29c"},{"name":"linux","_id":"cjcjtejg9001cx8xbfsumjc38"},{"name":"Linux","_id":"cjcjtejg9001dx8xb5wggbe7d"},{"name":"mac","_id":"cjcjtejgb001ox8xbfnaks0mk"},{"name":"Mac","_id":"cjcjtejgb001px8xbhlbpdcny"}]}}